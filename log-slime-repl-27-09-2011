; SLIME 2010-07-21
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 23 SEP 2011 10:52:18 AM):

; file: /home/manish/projects/lisp/web/learn/remind-me.lisp
; in: DEFPACKAGE :REMINDME
;     (DEFPACKAGE :REMINDME
;       "This is package for remindme project. It uses fare-csv and cl-smtp apart from
;   included packages."
;       (:USE :CL :HUNCHENTOOT :CL-WHO :CL-FAD :PARENSCRIPT :ELEPHANT :CL-PPCRE))
; 
; caught ERROR:
;   (during macroexpansion of (DEFPACKAGE :REMINDME
;     ...))
;   bogus DEFPACKAGE option: "This is package for remindme project. It uses fare-csv and cl-smtp apart from
;   included packages."

; in: IN-PACKAGE :REMINDME
;     (IN-PACKAGE :REMINDME)
; --> EVAL-WHEN 
; ==>
;   (SETQ *PACKAGE* (SB-INT:FIND-UNDELETED-PACKAGE-OR-LOSE "REMINDME"))
; 
; caught ERROR:
;   (during compile-time-too processing)
;   The name "REMINDME" does not designate any package.

; in: DEFUN CURRENT-YEAR
;     (MULTIPLE-VALUE-BIND (S MIN H D M Y) (GET-DECODED-TIME) Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (S) (MIN) (H) (D) (M) (Y) &REST #:G242)
;       (DECLARE (IGNORE #:G242))
;       Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.

; in: DEFUN HANDLE-FILE
;     (DESTRUCTURING-BIND
;         (PATH FILE-NAME CONTENT-TYPE)
;         POST-PARAMETER
;       (LET ((NEW-PATH
;              (MAKE-PATHNAME :NAME FILE-NAME :TYPE NIL :DEFAULTS
;                             *TMP-TEST-DIRECTORY*)))
;         (LOG-MESSAGE "New-path ~A" (PATHNAME-NAME NEW-PATH))
;         (COPY-FILE PATH (ENSURE-DIRECTORIES-EXIST NEW-PATH) :OVERWRITE T)
;         NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((PATH (CAR #:WHOLE385))
;          (FILE-NAME (CAR (CDR #:WHOLE385)))
;          (CONTENT-TYPE (CAR (CDR #))))
;     (LET ((NEW-PATH
;            (MAKE-PATHNAME :NAME FILE-NAME :TYPE NIL :DEFAULTS
;                           *TMP-TEST-DIRECTORY*)))
;       (LOG-MESSAGE "New-path ~A" (PATHNAME-NAME NEW-PATH))
;       (COPY-FILE PATH (ENSURE-DIRECTORIES-EXIST NEW-PATH) :OVERWRITE T)
;       NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.

; in: DEFUN TODAY
;     (MULTIPLE-VALUE-BIND (S M H DAY MONTH YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (S) (M) (H) (DAY) (MONTH) (YEAR) &REST #:G430)
;       (DECLARE (IGNORE #:G430))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.

; in: DEFUN IGNORE-YEAR
;     (MULTIPLE-VALUE-BIND (H M S DAY MONTH YEAR)
;         (DECODE-UNIVERSAL-TIME DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (H) (M) (S) (DAY) (MONTH) (YEAR) &REST #:G440)
;       (DECLARE (IGNORE #:G440))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.

; in: DEFMACRO STANDARD-PAGE
;     (DEFMACRO STANDARD-PAGE ((&KEY TITLE) &BODY BODY)
;       `(WITH-HTML-OUTPUT-TO-STRING (*STANDARD-OUTPUT* NIL :PROLOGUE T :INDENT T)
;         (:HTML :XMLNS ,"http://www.w3.org/1999/xhtml" :|XML:LANG| ,"en" :LANG
;          ,"en"
;          (:HEAD
;           (:META :HTTP-EQUIV "Content-Type" :CONTENT "text/html;charset=utf-8")
;           (:TITLE ,TITLE)
;           (:LINK :TYPE "text/css" :REL "stylesheet" :HREF "/remindme.css")
;           (:SCRIPT :TYPE "text/javascript" :SRC
;            "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
;          (:BODY (:DIV :ID "header" # #) ,@BODY))))
; --> EVAL-WHEN 
; ==>
;   (SB-C::%DEFMACRO 'STANDARD-PAGE
;                    #'(SB-INT:NAMED-LAMBDA (DEFMACRO STANDARD-PAGE)
;                          (#:WHOLE454 #:ENVIRONMENT455)
;                        (DECLARE (IGNORE #:ENVIRONMENT455))
;                        (LET* ((#:REQUIRED-457 #)
;                               (#:KEYWORDS-460 #:REQUIRED-457))
;                          (DECLARE (MUFFLE-CONDITIONS CODE-DELETION-NOTE))
;                          (DECLARE (IGNORABLE #:KEYWORDS-460))
;                          (LET (#)
;                            (UNLESS # #))
;                          (MULTIPLE-VALUE-BIND (#:PROBLEM461 #:INFO462)
;                              (SB-KERNEL::VERIFY-KEYWORDS #:KEYWORDS-460 '#
;                                                          'NIL)
;                            (WHEN #:PROBLEM461 #))
;                          (LET* (# #)
;                            (BLOCK STANDARD-PAGE `#))))
;                    '((&KEY TITLE) &BODY BODY) NIL
;                    '(MACRO-FUNCTION STANDARD-PAGE))
; 
; caught STYLE-WARNING:
;   STANDARD-PAGE is being redefined as a macro when it was previously assumed to be a function.

; in: DEFUN HANDLE-FILE
;     (COPY-FILE PATH (ENSURE-DIRECTORIES-EXIST NEW-PATH) :OVERWRITE T)
; 
; caught STYLE-WARNING:
;   undefined function: COPY-FILE

; in: DEFUN CLOSEST-DATE
;     (DATE< (IGNORE-YEAR DATE1) (IGNORE-YEAR DATE2))
; 
; caught STYLE-WARNING:
;   undefined function: DATE<

; in: DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home")
;     (DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home") NIL
;      (LET ((USER (SESSION-VALUE 'CURRENT-USER)))
;        (IF USER
;            (STANDARD-PAGE (:TITLE #) (:H3 #) (:UL #))
;            (REDIRECT "/create-user"))))
; 
; caught STYLE-WARNING:
;   undefined function: DEFINE-EASY-HANDLER

;     (ENCODE-BIRTHDAY-FROM-TIME (FRIEND-BIRTHDAY X))
; 
; caught STYLE-WARNING:
;   undefined function: ENCODE-BIRTHDAY-FROM-TIME

;     (:H3
;      (FORMAT NIL "Listing friends email and birthdays for ~A" (USER-NAME USER)))
; 
; caught STYLE-WARNING:
;   undefined function: :H3

;     (HTM
;      (:LI (:SPAN :CLASS "name" (STR (FRIEND-NAME X)))
;       (:SPAN :CLASS "email" (STR (FRIEND-EMAIL X)))
;       (:SPAN :CLASS "birthday" (STR (ENCODE-BIRTHDAY-FROM-TIME #)))))
; 
; caught STYLE-WARNING:
;   undefined function: HTM

;     (:LI (:SPAN :CLASS "name" (STR (FRIEND-NAME X)))
;      (:SPAN :CLASS "email" (STR (FRIEND-EMAIL X)))
;      (:SPAN :CLASS "birthday"
;       (STR (ENCODE-BIRTHDAY-FROM-TIME (FRIEND-BIRTHDAY X)))))
; 
; caught STYLE-WARNING:
;   undefined function: :LI

; in: DEFUN HANDLE-FILE
;     (LOG-MESSAGE "New-path ~A" (PATHNAME-NAME NEW-PATH))
; 
; caught STYLE-WARNING:
;   undefined function: LOG-MESSAGE

; in: DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home")
;     (NEW-USER-HOME :URI "/new-user-home")
; 
; caught STYLE-WARNING:
;   undefined function: NEW-USER-HOME

;     (REDIRECT "/create-user")
; 
; caught STYLE-WARNING:
;   undefined function: REDIRECT

;     (SESSION-VALUE 'CURRENT-USER)
; 
; caught STYLE-WARNING:
;   undefined function: SESSION-VALUE

;     (:SPAN :CLASS "name" (STR (FRIEND-NAME X)))
; 
; caught STYLE-WARNING:
;   undefined function: :SPAN

;     (STANDARD-PAGE (:TITLE (FORMAT NIL "Welcome ~A" (USER-NAME USER)))
;      (:H3
;       (FORMAT NIL "Listing friends email and birthdays for ~A" (USER-NAME USER)))
;      (:UL (DOLIST (X (USER-FRIENDS-LIST USER)) (HTM (:LI # # #)))))
; 
; caught STYLE-WARNING:
;   undefined function: STANDARD-PAGE

;     (STR (FRIEND-NAME X))
; 
; caught STYLE-WARNING:
;   undefined function: STR

;     (:TITLE (FORMAT NIL "Welcome ~A" (USER-NAME USER)))
; 
; caught STYLE-WARNING:
;   undefined function: :TITLE

;     (:UL
;      (DOLIST (X (USER-FRIENDS-LIST USER))
;        (HTM
;         (:LI (:SPAN :CLASS "name" #) (:SPAN :CLASS "email" #)
;          (:SPAN :CLASS "birthday" #)))))
; 
; caught STYLE-WARNING:
;   undefined function: :UL
; 
; compilation unit finished
;   Undefined functions:
;     COPY-FILE DATE< DEFINE-EASY-HANDLER ENCODE-BIRTHDAY-FROM-TIME :H3 HTM :LI LOG-MESSAGE NEW-USER-HOME REDIRECT SESSION-VALUE :SPAN STANDARD-PAGE STR :TITLE :UL
;   caught 2 ERROR conditions
;   caught 30 STYLE-WARNING conditions

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.392
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 23 SEP 2011 10:56:32 AM):

; file: /home/manish/projects/lisp/web/learn/remind-me.lisp
; in: DEFUN CURRENT-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S MIN REMINDME::H REMINDME::D REMINDME::M REMINDME::Y)
;         (GET-DECODED-TIME)
;       REMINDME::Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (MIN) (REMINDME::H) (REMINDME::D)
;          (REMINDME::M) (REMINDME::Y)
;          &REST #:G291)
;       (DECLARE (IGNORE #:G291))
;       REMINDME::Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.

; in: DEFUN HANDLE-FILE
;     (DESTRUCTURING-BIND
;         (REMINDME::PATH REMINDME::FILE-NAME HUNCHENTOOT:CONTENT-TYPE)
;         HUNCHENTOOT:POST-PARAMETER
;       (LET ((REMINDME::NEW-PATH
;              (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                             REMINDME::*TMP-TEST-DIRECTORY*)))
;         (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                  (PATHNAME-NAME REMINDME::NEW-PATH))
;         (CL-FAD:COPY-FILE REMINDME::PATH
;                           (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                           :OVERWRITE T)
;         REMINDME::NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((REMINDME::PATH (CAR #:WHOLE434))
;          (REMINDME::FILE-NAME (CAR (CDR #:WHOLE434)))
;          (HUNCHENTOOT:CONTENT-TYPE (CAR (CDR #))))
;     (LET ((REMINDME::NEW-PATH
;            (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                           REMINDME::*TMP-TEST-DIRECTORY*)))
;       (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                (PATHNAME-NAME REMINDME::NEW-PATH))
;       (CL-FAD:COPY-FILE REMINDME::PATH
;                         (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                         :OVERWRITE T)
;       REMINDME::NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.

; in: DEFUN TODAY
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G501)
;       (DECLARE (IGNORE #:G501))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH
;                              REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.

; in: DEFUN IGNORE-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::H REMINDME::M REMINDME::S REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME REMINDME::DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::H) (REMINDME::M) (REMINDME::S) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G573)
;       (DECLARE (IGNORE #:G573))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.

; in: DEFMACRO STANDARD-PAGE
;     (DEFMACRO REMINDME::STANDARD-PAGE
;               ((&KEY REMINDME::TITLE) &BODY REMINDME::BODY)
;       `(CL-WHO:WITH-HTML-OUTPUT-TO-STRING (*STANDARD-OUTPUT* NIL :PROLOGUE T
;                                            :INDENT T)
;          (:HTML :XMLNS ,"http://www.w3.org/1999/xhtml" :|XML:LANG| ,"en" :LANG
;           ,"en"
;           (:HEAD
;            (:META :HTTP-EQUIV "Content-Type" :CONTENT "text/html;charset=utf-8")
;            (:TITLE ,REMINDME::TITLE)
;            (:LINK :TYPE "text/css" :REL "stylesheet" :HREF "/remindme.css")
;            (:SCRIPT :TYPE "text/javascript" :SRC
;             "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
;           (:BODY (:DIV :ID "header" # #) ,@REMINDME::BODY))))
; --> EVAL-WHEN 
; ==>
;   (SB-C::%DEFMACRO 'REMINDME::STANDARD-PAGE
;                    #'(SB-INT:NAMED-LAMBDA (DEFMACRO REMINDME::STANDARD-PAGE)
;                          (#:WHOLE587 #:ENVIRONMENT588)
;                        (DECLARE (IGNORE #:ENVIRONMENT588))
;                        (LET* ((#:REQUIRED-590 #)
;                               (#:KEYWORDS-593 #:REQUIRED-590))
;                          (DECLARE (MUFFLE-CONDITIONS CODE-DELETION-NOTE))
;                          (DECLARE (IGNORABLE #:KEYWORDS-593))
;                          (LET (#)
;                            (UNLESS # #))
;                          (MULTIPLE-VALUE-BIND (#:PROBLEM594 #:INFO595)
;                              (SB-KERNEL::VERIFY-KEYWORDS #:KEYWORDS-593 '#
;                                                          'NIL)
;                            (WHEN #:PROBLEM594 #))
;                          (LET* (# #)
;                            (BLOCK REMINDME::STANDARD-PAGE `#))))
;                    '((&KEY REMINDME::TITLE) &BODY REMINDME::BODY) NIL
;                    '(MACRO-FUNCTION REMINDME::STANDARD-PAGE))
; 
; caught STYLE-WARNING:
;   STANDARD-PAGE is being redefined as a macro when it was previously assumed to be a function.

; in: DEFUN CLOSEST-DATE
;     (REMINDME::DATE< (REMINDME::IGNORE-YEAR REMINDME::DATE1)
;      (REMINDME::IGNORE-YEAR REMINDME::DATE2))
; 
; caught STYLE-WARNING:
;   undefined function: DATE<

; in: DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home")
;     (REMINDME::ENCODE-BIRTHDAY-FROM-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::X))
; 
; caught STYLE-WARNING:
;   undefined function: ENCODE-BIRTHDAY-FROM-TIME

;     (:H3
;      (FORMAT NIL "Listing friends email and birthdays for ~A"
;              (REMINDME::USER-NAME REMINDME::USER)))
; 
; caught STYLE-WARNING:
;   undefined function: :H3

;     (CL-WHO:HTM
;      (:LI (:SPAN :CLASS "name" (CL-WHO:STR (REMINDME::FRIEND-NAME REMINDME::X)))
;       (:SPAN :CLASS "email" (CL-WHO:STR (REMINDME::FRIEND-EMAIL REMINDME::X)))
;       (:SPAN :CLASS "birthday"
;        (CL-WHO:STR (REMINDME::ENCODE-BIRTHDAY-FROM-TIME #)))))
; 
; caught STYLE-WARNING:
;   undefined function: HTM

;     (:LI (:SPAN :CLASS "name" (CL-WHO:STR (REMINDME::FRIEND-NAME REMINDME::X)))
;      (:SPAN :CLASS "email" (CL-WHO:STR (REMINDME::FRIEND-EMAIL REMINDME::X)))
;      (:SPAN :CLASS "birthday"
;       (CL-WHO:STR
;        (REMINDME::ENCODE-BIRTHDAY-FROM-TIME
;         (REMINDME::FRIEND-BIRTHDAY REMINDME::X)))))
; 
; caught STYLE-WARNING:
;   undefined function: :LI

;     (:SPAN :CLASS "name" (CL-WHO:STR (REMINDME::FRIEND-NAME REMINDME::X)))
; 
; caught STYLE-WARNING:
;   undefined function: :SPAN

;     (REMINDME::STANDARD-PAGE
;      (:TITLE (FORMAT NIL "Welcome ~A" (REMINDME::USER-NAME REMINDME::USER)))
;      (:H3
;       (FORMAT NIL "Listing friends email and birthdays for ~A"
;               (REMINDME::USER-NAME REMINDME::USER)))
;      (:UL
;       (DOLIST (REMINDME::X (REMINDME::USER-FRIENDS-LIST REMINDME::USER))
;         (CL-WHO:HTM (:LI # # #)))))
; 
; caught STYLE-WARNING:
;   undefined function: STANDARD-PAGE

;     (CL-WHO:STR (REMINDME::FRIEND-NAME REMINDME::X))
; 
; caught STYLE-WARNING:
;   undefined function: STR

;     (:TITLE (FORMAT NIL "Welcome ~A" (REMINDME::USER-NAME REMINDME::USER)))
; 
; caught STYLE-WARNING:
;   undefined function: :TITLE

;     (:UL
;      (DOLIST (REMINDME::X (REMINDME::USER-FRIENDS-LIST REMINDME::USER))
;        (CL-WHO:HTM
;         (:LI (:SPAN :CLASS "name" #) (:SPAN :CLASS "email" #)
;          (:SPAN :CLASS "birthday" #)))))
; 
; caught STYLE-WARNING:
;   undefined function: :UL
; 
; compilation unit finished
;   Undefined functions:
;     DATE< ENCODE-BIRTHDAY-FROM-TIME :H3 HTM :LI :SPAN STANDARD-PAGE STR :TITLE :UL
;   caught 24 STYLE-WARNING conditions

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.305
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 23 SEP 2011 10:56:57 AM):

; file: /home/manish/projects/lisp/web/learn/remind-me.lisp
; in: DEFUN CURRENT-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S MIN REMINDME::H REMINDME::D REMINDME::M REMINDME::Y)
;         (GET-DECODED-TIME)
;       REMINDME::Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (MIN) (REMINDME::H) (REMINDME::D)
;          (REMINDME::M) (REMINDME::Y)
;          &REST #:G283)
;       (DECLARE (IGNORE #:G283))
;       REMINDME::Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.

; in: DEFUN HANDLE-FILE
;     (DESTRUCTURING-BIND
;         (REMINDME::PATH REMINDME::FILE-NAME HUNCHENTOOT:CONTENT-TYPE)
;         HUNCHENTOOT:POST-PARAMETER
;       (LET ((REMINDME::NEW-PATH
;              (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                             REMINDME::*TMP-TEST-DIRECTORY*)))
;         (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                  (PATHNAME-NAME REMINDME::NEW-PATH))
;         (CL-FAD:COPY-FILE REMINDME::PATH
;                           (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                           :OVERWRITE T)
;         REMINDME::NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((REMINDME::PATH (CAR #:WHOLE426))
;          (REMINDME::FILE-NAME (CAR (CDR #:WHOLE426)))
;          (HUNCHENTOOT:CONTENT-TYPE (CAR (CDR #))))
;     (LET ((REMINDME::NEW-PATH
;            (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                           REMINDME::*TMP-TEST-DIRECTORY*)))
;       (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                (PATHNAME-NAME REMINDME::NEW-PATH))
;       (CL-FAD:COPY-FILE REMINDME::PATH
;                         (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                         :OVERWRITE T)
;       REMINDME::NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.

; in: DEFUN TODAY
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G521)
;       (DECLARE (IGNORE #:G521))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH
;                              REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.

; in: DEFUN IGNORE-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::H REMINDME::M REMINDME::S REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME REMINDME::DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::H) (REMINDME::M) (REMINDME::S) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G593)
;       (DECLARE (IGNORE #:G593))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.

; in: DEFUN CLOSEST-DATE
;     (REMINDME::DATE< (REMINDME::IGNORE-YEAR REMINDME::DATE1)
;      (REMINDME::IGNORE-YEAR REMINDME::DATE2))
; 
; caught STYLE-WARNING:
;   undefined function: DATE<

; in: DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home")
;     (REMINDME::STANDARD-PAGE (:TITLE
;                               (FORMAT NIL "Welcome ~A"
;                                       (REMINDME::USER-NAME REMINDME::USER)))
;       (:H3
;        (FORMAT NIL "Listing friends email and birthdays for ~A"
;                (REMINDME::USER-NAME REMINDME::USER)))
;       (:UL
;        (DOLIST (REMINDME::X (REMINDME::USER-FRIENDS-LIST REMINDME::USER))
;          (CL-WHO:HTM (:LI # # #)))))
; --> CL-WHO:WITH-HTML-OUTPUT-TO-STRING WITH-OUTPUT-TO-STRING LET 
; --> UNWIND-PROTECT FLET BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> BLOCK SB-C::%WITHIN-CLEANUP RETURN-FROM PROGN 
; --> CL-WHO:WITH-HTML-OUTPUT LET PROGN DOLIST BLOCK LET TAGBODY UNLESS IF 
; --> PROGN LET* TAGBODY PROGN LET 
; ==>
;   (REMINDME::ENCODE-BIRTHDAY-FROM-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::X))
; 
; caught STYLE-WARNING:
;   undefined function: ENCODE-BIRTHDAY-FROM-TIME
; 
; compilation unit finished
;   Undefined functions:
;     DATE< ENCODE-BIRTHDAY-FROM-TIME
;   caught 15 STYLE-WARNING conditions

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.296
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 23 SEP 2011 10:58:46 AM):

; file: /home/manish/projects/lisp/web/learn/remind-me.lisp
; in: DEFUN CURRENT-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S MIN REMINDME::H REMINDME::D REMINDME::M REMINDME::Y)
;         (GET-DECODED-TIME)
;       REMINDME::Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (MIN) (REMINDME::H) (REMINDME::D)
;          (REMINDME::M) (REMINDME::Y)
;          &REST #:G283)
;       (DECLARE (IGNORE #:G283))
;       REMINDME::Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.

; in: DEFUN HANDLE-FILE
;     (DESTRUCTURING-BIND
;         (REMINDME::PATH REMINDME::FILE-NAME HUNCHENTOOT:CONTENT-TYPE)
;         HUNCHENTOOT:POST-PARAMETER
;       (LET ((REMINDME::NEW-PATH
;              (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                             REMINDME::*TMP-TEST-DIRECTORY*)))
;         (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                  (PATHNAME-NAME REMINDME::NEW-PATH))
;         (CL-FAD:COPY-FILE REMINDME::PATH
;                           (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                           :OVERWRITE T)
;         REMINDME::NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((REMINDME::PATH (CAR #:WHOLE426))
;          (REMINDME::FILE-NAME (CAR (CDR #:WHOLE426)))
;          (HUNCHENTOOT:CONTENT-TYPE (CAR (CDR #))))
;     (LET ((REMINDME::NEW-PATH
;            (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                           REMINDME::*TMP-TEST-DIRECTORY*)))
;       (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                (PATHNAME-NAME REMINDME::NEW-PATH))
;       (CL-FAD:COPY-FILE REMINDME::PATH
;                         (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                         :OVERWRITE T)
;       REMINDME::NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.

; in: DEFUN TODAY
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G521)
;       (DECLARE (IGNORE #:G521))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH
;                              REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.

; in: DEFUN IGNORE-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::H REMINDME::M REMINDME::S REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME REMINDME::DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::H) (REMINDME::M) (REMINDME::S) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G593)
;       (DECLARE (IGNORE #:G593))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.

; in: DEFUN CLOSEST-DATE
;     (REMINDME::DATE< (REMINDME::IGNORE-YEAR REMINDME::DATE1)
;      (REMINDME::IGNORE-YEAR REMINDME::DATE2))
; 
; caught STYLE-WARNING:
;   undefined function: DATE<

; in: DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home")
;     (REMINDME::STANDARD-PAGE (:TITLE
;                               (FORMAT NIL "Welcome ~A"
;                                       (REMINDME::USER-NAME REMINDME::USER)))
;       (:H3
;        (FORMAT NIL "Listing friends email and birthdays for ~A"
;                (REMINDME::USER-NAME REMINDME::USER)))
;       (:UL
;        (DOLIST (REMINDME::X (REMINDME::USER-FRIENDS-LIST REMINDME::USER))
;          (CL-WHO:HTM (:LI # # #)))))
; --> CL-WHO:WITH-HTML-OUTPUT-TO-STRING WITH-OUTPUT-TO-STRING LET 
; --> UNWIND-PROTECT FLET BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> BLOCK SB-C::%WITHIN-CLEANUP RETURN-FROM PROGN 
; --> CL-WHO:WITH-HTML-OUTPUT LET PROGN DOLIST BLOCK LET TAGBODY UNLESS IF 
; --> PROGN LET* TAGBODY PROGN LET 
; ==>
;   (REMINDME::ENCODE-BIRTHDAY-FROM-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::X))
; 
; caught STYLE-WARNING:
;   undefined function: ENCODE-BIRTHDAY-FROM-TIME
; 
; compilation unit finished
;   Undefined functions:
;     DATE< ENCODE-BIRTHDAY-FROM-TIME
;   caught 15 STYLE-WARNING conditions

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.221
STYLE-WARNING: redefining REMINDME::MY-UPLOADER in DEFUN
STYLE-WARNING: redefining REMINDME::MAKE-USER in DEFUN

CL-USER> 
REMINDME> (start *site*)
; in: LAMBDA NIL
;     (REMINDME::STANDARD-PAGE :TITLE
;       "Create a new assistant"
;       (:H3
;        "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
;       (:FORM :ACTION "/new-user" :METHOD :POST :ENCTYPE "multipart/form-data"
;        (:INPUT :TYPE :STRING :NAME "name")
;        (:INPUT :TYPE :PASSWORD :NAME "password")
;        (:INPUT :TYPE :FILE :NAME "file1")
;        (:INPUT :TYPE :SUBMIT :VALUE "Create user")))
; 
; caught ERROR:
;   during macroexpansion of
;   (STANDARD-PAGE :TITLE
;     "Create a new assistant"
;     ...).
;   Use *BREAK-ON-SIGNALS* to intercept:
;   
;    error while parsing arguments to DEFMACRO STANDARD-PAGE:
;      bogus sublist :TITLE to satisfy lambda-list (&KEY TITLE)
; 
; compilation unit finished
;   caught 1 ERROR condition
; in: LAMBDA NIL
;     (REMINDME::STANDARD-PAGE :TITLE
;       "Create a new assistant"
;       (:H3
;        "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
;       (:FORM :ACTION "/new-user" :METHOD :POST :ENCTYPE "multipart/form-data"
;        (:INPUT :TYPE :STRING :NAME "name")
;        (:INPUT :TYPE :PASSWORD :NAME "password")
;        (:INPUT :TYPE :FILE :NAME "file1")
;        (:INPUT :TYPE :SUBMIT :VALUE "Create user")))
; 
; caught ERROR:
;   during macroexpansion of
;   (STANDARD-PAGE :TITLE
;     "Create a new assistant"
;     ...).
;   Use *BREAK-ON-SIGNALS* to intercept:
;   
;    error while parsing arguments to DEFMACRO STANDARD-PAGE:
;      bogus sublist :TITLE to satisfy lambda-list (&KEY TITLE)
; 
; compilation unit finished
;   caught 1 ERROR condition
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
#<ACCEPTOR (host *, port 8000)>
REMINDME> (define-easy-handler (create-user) ()
              (standard-page 
                  :title "Create a new assistant" 
                  (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
                  (:form :action "/new-user" :method :post :enctype "multipart/form-data"
                         (:input :type :string :name "name")
                         (:input :type :password :name "password")
                         (:input :type :file :name "file1")
                         (:input :type :submit :value "Create user"))))
; in: LAMBDA NIL
;     (REMINDME::STANDARD-PAGE :TITLE
;       "Create a new assistant"
;       (:H3
;        "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
;       (:FORM :ACTION "/new-user" :METHOD :POST :ENCTYPE "multipart/form-data"
;        (:INPUT :TYPE :STRING :NAME "name")
;        (:INPUT :TYPE :PASSWORD :NAME "password")
;        (:INPUT :TYPE :FILE :NAME "file1")
;        (:INPUT :TYPE :SUBMIT :VALUE "Create user")))
; 
; caught ERROR:
;   during macroexpansion of
;   (STANDARD-PAGE :TITLE
;     "Create a new assistant"
;     ...).
;   Use *BREAK-ON-SIGNALS* to intercept:
;   
;    error while parsing arguments to DEFMACRO STANDARD-PAGE:
;      bogus sublist :TITLE to satisfy lambda-list (&KEY TITLE)
; 
; compilation unit finished
;   caught 1 ERROR condition
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user) ()
              (standard-page 
                  :title "Create a new assistant" 
                  (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
                  (:form :action "/new-user" :method :post :enctype "multipart/form-data"
                         (:input :type :string :name "name")
                         (:input :type :password :name "password")
                         (:input :type :file :name "file1")
                         (:input :type :submit :value "Create user"))))
; in: LAMBDA NIL
;     (REMINDME::STANDARD-PAGE :TITLE
;       "Create a new assistant"
;       (:H3
;        "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
;       (:FORM :ACTION "/new-user" :METHOD :POST :ENCTYPE "multipart/form-data"
;        (:INPUT :TYPE :STRING :NAME "name")
;        (:INPUT :TYPE :PASSWORD :NAME "password")
;        (:INPUT :TYPE :FILE :NAME "file1")
;        (:INPUT :TYPE :SUBMIT :VALUE "Create user")))
; 
; caught ERROR:
;   during macroexpansion of
;   (STANDARD-PAGE :TITLE
;     "Create a new assistant"
;     ...).
;   Use *BREAK-ON-SIGNALS* to intercept:
;   
;    error while parsing arguments to DEFMACRO STANDARD-PAGE:
;      bogus sublist :TITLE to satisfy lambda-list (&KEY TITLE)
; 
; compilation unit finished
;   caught 1 ERROR condition
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user) ()
              (standard-page 
                  (:title "Create a new assistant")
                  (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
                  (:form :action "/new-user" :method :post :enctype "multipart/form-data"
                         (:input :type :string :name "name")
                         (:input :type :password :name "password")
                         (:input :type :file :name "file1")
                         (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
              (standard-page 
                  (:title "Create a new assistant")
                  (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
                  (:form :action "/new-user" :method :post :enctype "multipart/form-data"
                         (:input :type :string :name "name")
                         (:input :type :password :name "password")
                         (:input :type :file :name "file1")
                         (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
              (standard-page 
                  (:title "Create a new assistant")
                  (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
                  (:form :action "/new-user" :method :post :enctype "multipart/form-data"
                         (:input :type :string :name "name")
                         (:input :type :password :name "password")
                         (:input :type :file :name "file1")
                         (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name" (:input :type :string :name "name" :label "Name"))
           (:p "Password" (:input :type :password :name "password") (:br))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
              (standard-page 
                  (:title "Create a new assistant")
                  (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
                  (:form :action "/new-user" :method :post :enctype "multipart/form-data"
                         (:input :type :string :name "name")
                         (:input :type :password :name "password")
                         (:input :type :file :name "file1")
                         (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (new-user :uri "/new-user") ()
  "To create users from the form submitted by user"
  (let ((file (post-parameter "file1"))
        (name (post-parameter "name"))
        (password (post-parameter "password")))
    (log-message :info "POST ~A" (post-parameter "file1"))
    (log-message :info "POST:name ~A" name) 
    (log-message :info "FILE ~A" file)
    (when file
      (let ((path (handle-file file)))
        (log-message :info "Saved file to ~A" path)
        (setf (session-value 'current-user)  (create-user-from-form name password path))
        (redirect "/new-user-home" )))))
; in: LAMBDA NIL
;     (REMINDME::STANDARD-PAGE (:TITLE
;                               (FORMAT NIL "Welcome ~A"
;                                       (REMINDME::USER-NAME REMINDME::USER)))
;       (:H3
;        (FORMAT NIL "Listing friends email and birthdays for ~A"
;                (REMINDME::USER-NAME REMINDME::USER)))
;       (:UL
;        (DOLIST (REMINDME::X (REMINDME::USER-FRIENDS-LIST REMINDME::USER))
;          (CL-WHO:HTM (:LI # # #)))))
; --> CL-WHO:WITH-HTML-OUTPUT-TO-STRING WITH-OUTPUT-TO-STRING LET 
; --> UNWIND-PROTECT FLET BLOCK MULTIPLE-VALUE-BIND MULTIPLE-VALUE-CALL 
; --> BLOCK SB-C::%WITHIN-CLEANUP RETURN-FROM PROGN 
; --> CL-WHO:WITH-HTML-OUTPUT LET PROGN DOLIST BLOCK LET TAGBODY UNLESS IF 
; --> PROGN LET* TAGBODY PROGN LET 
; ==>
;   (REMINDME::ENCODE-BIRTHDAY-FROM-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::X))
; 
; caught STYLE-WARNING:
;   undefined function: ENCODE-BIRTHDAY-FROM-TIME
; 
; compilation unit finished
;   Undefined function:
;     ENCODE-BIRTHDAY-FROM-TIME
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::NEW-USER-HOME in DEFUN
NEW-USER
REMINDME> (define-easy-handler (new-user-home :uri "/new-user-home") ()
  (let ((user (session-value 'current-user)))
    (if user
        (standard-page (:title (format nil "Welcome ~A" (user-name user)))
          (:h3 (format nil "Listing friends email and birthdays for ~A"
                       (user-name user)))
          (:ul 
           (dolist (x (user-friends-list user))
             (htm (:li (:span  :class "name" (str(friend-name x)))
                       (:span :class "email" (str (friend-email x)))
                       (:span :class "birthday" (str (encode-birthday-from-time 
                                                      (friend-birthday x)))))))))
        (redirect "/create-user"))))
; 
; caught STYLE-WARNING:
;   undefined function: ENCODE-BIRTHDAY-FROM-TIME
; 
; compilation unit finished
;   Undefined function:
;     ENCODE-BIRTHDAY-FROM-TIME
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::NEW-USER-HOME in DEFUN
NEW-USER-HOME
REMINDME> (define-easy-handler (new-user :uri "/new-user") ()
  "To create users from the form submitted by user"
  (let ((file (post-parameter "file1"))
        (name (post-parameter "name"))
        (password (post-parameter "password")))
    (log-message :info "POST ~A" (post-parameter "file1"))
    (log-message :info "POST:name ~A" name) 
    (log-message :info "FILE ~A" file)
    (when file
      (let ((path (handle-file file)))
        (log-message :info "Saved file to ~A" path)
        (setf (session-value 'current-user)  (create-user-from-form name password path))
        (redirect "/new-user-home" )))))
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
NEW-USER
REMINDME> (setf *catch-errors-p* nil)
NIL
REMINDME> (string= "Shakeela" "shakeela")
NIL
REMINDME> (equal "Shakeela" "shakeela")
NIL
REMINDME> (string= "Shakeela" "shakeela")
NIL
REMINDME> (string= "shakeela" "shakeela")
T
REMINDME> (equalp "shakeela" "shakeela")
T
REMINDME> (equalp "shakeela" "Shakeela")
T
REMINDME> (equalp "shakeela" "Shakeeala")
NIL
REMINDME> (equalp "shakeela" "Shakeelaa")
NIL
REMINDME> (defvar *database-of-users*
  (make-hash-table :test #'equalp))
*DATABASE-OF-USERS*
REMINDME> *database-of-users*
#<HASH-TABLE :TEST EQUALP :COUNT 0 {100455C291}>
REMINDME> (defun encode-birthday-from-time (time)
  (multiple-value-bind (s m h day mon year) (decode-universal-time time)
    (format nil "~A.~A.~A" mon day year)))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME TIME)
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
ENCODE-BIRTHDAY-FROM-TIME
REMINDME> (defun date< (date1 date2 &optional(ignore-year t))
            (let ((today (if ignore-year (ignore-year (today)) (today))))
              (let ((one (if ignore-year (- today (ignore-year date1)) (- today  date1)))
                    (two (if ignore-year (- today (ignore-year date2)) (- today date2))))
                (if (or (and (<= one 0) (<= two 0)) (and (>= one 0) (>= two 0)))
                    (< one two)
                    (if (< one 0)
                        nil
                        t)))))
            
DATE<
REMINDME> (date< (today) (add-days (today) 1))
NIL
REMINDME> (defun date< (date1 date2 &optional(ignore-year t))
            (let ((today (if ignore-year (ignore-year (today)) (today))))
              (let ((one (if ignore-year (- today (ignore-year date1)) (- today  date1)))
                    (two (if ignore-year (- today (ignore-year date2)) (- today date2))))
                (if (or (and (<= one 0) (<= two 0)) (and (>= one 0) (>= two 0)))
                    (progn 
                      (format t "Both +ve or both -ve one: ~A two ~A ~%" one two)
                      (< one two))
                    (if (< one 0)
                        (progn 
                          (format t "one is -ve one: ~A ~%"))
                          nil
                        t
            )))))
; in: LAMBDA NIL
;     (IF (< REMINDME::ONE 0)
;         (PROGN (FORMAT T "one is -ve one: ~A ~%"))
;         NIL
;         T)
; 
; caught ERROR:
;   error while parsing arguments to special form IF:
;     invalid number of elements in
;       ((< ONE 0) (PROGN (FORMAT T "one is -ve one: ~A ~%")) NIL T)
;     to satisfy lambda list
;       (SB-C::TEST SB-C::THEN &OPTIONAL SB-C::ELSE):
;     between 2 and 3 expected, but 4 found
; 
; compilation unit finished
;   caught 1 ERROR condition
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
DATE<
REMINDME> (defun date< (date1 date2 &optional(ignore-year t))
            (let ((today (if ignore-year (ignore-year (today)) (today))))
              (let ((one (if ignore-year (- today (ignore-year date1)) (- today  date1)))
                    (two (if ignore-year (- today (ignore-year date2)) (- today date2))))
                (if (or (and (<= one 0) (<= two 0)) (and (>= one 0) (>= two 0)))
                    (progn 
                      (format t "Both +ve or both -ve one: ~A two ~A ~%" one two)
                      (< one two))
                    (if (< one 0)
                        (progn 
                          (format t "one is -ve one: ~A ~%")
                          nil)
                        t
            )))))
; 
; caught WARNING:
;   Too few arguments (0) to FORMAT "one is -ve one: ~A ~%": requires at least 1.
;   See also:
;     The ANSI Standard, Section 22.3.10.2
; 
; compilation unit finished
;   caught 1 WARNING condition
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
DATE<
REMINDME> (defun date< (date1 date2 &optional(ignore-year t))
            (let ((today (if ignore-year (ignore-year (today)) (today))))
              (let ((one (if ignore-year (- today (ignore-year date1)) (- today  date1)))
                    (two (if ignore-year (- today (ignore-year date2)) (- today date2))))
                (if (or (and (<= one 0) (<= two 0)) (and (>= one 0) (>= two 0)))
                    (progn 
                      (format t "Both +ve or both -ve one: ~A two ~A ~%" one two)
                      (< one two))
                    (if (< one 0)
                        (progn 
                          (format t "one is -ve one: ~A ~%" one)
                          nil)
                        t
            )))))
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
DATE<
REMINDME> (date< (today) (add-days (today) 1))
Both +ve or both -ve one: 0 two -86400 
NIL
REMINDME> (date< (today) (add-days (today) -1))
Both +ve or both -ve one: 0 two 86400 
T
REMINDME> (defun date< (date1 date2 &optional(ignore-year t))
            (let ((today (if ignore-year (ignore-year (today)) (today))))
              (let ((one (if ignore-year (- (ignore-year date1) today) (- date1  today)))
                    (two (if ignore-year (- (ignore-year date2) today) (- date2 today))))
                (if (or (and (<= one 0) (<= two 0)) (and (>= one 0) (>= two 0)))
                    (progn 
                      (format t "Both +ve or both -ve one: ~A two ~A ~%" one two)
                      (< one two))
                    (if (< one 0)
                        (progn 
                          (format t "one is -ve one: ~A ~%" one)
                          nil)
                        t
            )))))
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
DATE<
REMINDME> (date< (today) (add-days (today) 1))
Both +ve or both -ve one: 0 two 86400 
T
REMINDME> (date< (today) (add-days (today) -1))
Both +ve or both -ve one: 0 two -86400 
NIL
REMINDME> (date< (today) (add-days (today) +366))
Both +ve or both -ve one: 0 two 0 
NIL
REMINDME> (date< (today) (add-days (today) +367))
Both +ve or both -ve one: 0 two 86400 
T
REMINDME> (date< (today) (add-days (today) -366))
Both +ve or both -ve one: 0 two -86400 
NIL
REMINDME> (defun date< (date1 date2 &optional(ignore-year t))
            (let ((today (if ignore-year (ignore-year (today)) (today))))
              (let ((one (if ignore-year (- (ignore-year date1) today) (- date1  today)))
                    (two (if ignore-year (- (ignore-year date2) today) (- date2 today))))
                (if (or (and (<= one 0) (<= two 0)) (and (>= one 0) (>= two 0)))
                    (< one two)
                    (if (< one 0)
                        nil
                        t
            )))))
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
DATE<
REMINDME> (date< (today) (add-days (today) -366))
NIL
REMINDME> (date< (today) (add-days (today) +367))
T
REMINDME> (defmacro standard-page ((&key title) &body body)
            `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
               (:html :xmlns "http://www.w3.org/1999/xhtml"
                      :xml\:lang "en"
                      :lang "en"
                      (:head
                       (:meta :http-equiv "Content-Type"
                              :content "text/html;charset=utf-8")
                       (:title ,title)
                       (:link :type "text/css"
                              :rel "stylesheet"
                              :href "/remindme.css")
                       (:script :type "text/javascript" 
                                :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
                      (:body
                       (:div :id "header"
                             (:img :src "/logo.jpg"
                                   :alt "Some image"
                                   :class "logo")
                             (:span :class "strapline"
                                    "Your friend's birthday in your pocket"))
                       ,@body))))
STANDARD-PAGE
REMINDME> (defmacro standard-page ((&key title) &body body)
            `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
               (:html :xmlns "http://www.w3.org/1999/xhtml"
                      :xml\:lang "en"
                      :lang "en"
                      (:head
                       (:meta :http-equiv "Content-Type"
                              :content "text/html;charset=utf-8")
                       (:title ,title)
                       (:link :type "text/css"
                              :rel "stylesheet"
                              :href "/remindme.css")
                       (:script :type "text/javascript" 
                                :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
                      (:script :type "text/javascript"
                               :src "/public/jquery-validate.js")
                      (:body
                       (:div :id "header"
                             (:img :src "/logo.jpg"
                                   :alt "Some image"
                                   :class "logo")
                             (:span :class "strapline"
                                    "Your friend's birthday in your pocket"))
                       ,@body))))
            
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
STANDARD-PAGE
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name" (:input :type :string :name "name" :label "Name"))
           (:p "Password" (:input :type :password :name "password") (:br))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (new-user-home :uri "/new-user-home") ()
  (let ((user (session-value 'current-user)))
    (if user
        (standard-page (:title (format nil "Welcome ~A" (user-name user)))
          (:h3 (format nil "Listing friends email and birthdays for ~A"
                       (user-name user)))
          (:ul 
           (dolist (x (user-friends-list user))
             (htm (:li (:span  :class "name" (str(friend-name x)))
                       (:span :class "email" (str (friend-email x)))
                       (:span :class "birthday" (str (encode-birthday-from-time 
                                                      (friend-birthday x)))))))))
        (redirect "/create-user"))))
STYLE-WARNING: redefining REMINDME::NEW-USER-HOME in DEFUN
NEW-USER-HOME
REMINDME> (define-easy-handler (new-user :uri "/new-user") ()
  "To create users from the form submitted by user"
  (let ((file (post-parameter "file1"))
        (name (post-parameter "name"))
        (password (post-parameter "password")))
    (log-message :info "POST ~A" (post-parameter "file1"))
    (log-message :info "POST:name ~A" name) 
    (log-message :info "FILE ~A" file)
    (when file
      (let ((path (handle-file file)))
        (log-message :info "Saved file to ~A" path)
        (setf (session-value 'current-user)  (create-user-from-form name password path))
        (redirect "/new-user-home" )))))
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
NEW-USER
REMINDME> (create-folder-dispatcher-and-handler "/public/" "/home/manish/projects/lisp/public/")
#<CLOSURE (LAMBDA (REQUEST)) {10035F5319}>
REMINDME> (push (create-folder-dispatcher-and-handler "/public/" "/home/manish/projects/lisp/public/") *dispatch-table*)
(#<CLOSURE (LAMBDA #) {1004FC79E9}> DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> *dispatch-table*
(#<CLOSURE (LAMBDA #) {1005028EF9}> DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (push (create-folder-dispatcher-and-handler "/public/" "/home/manish/projects/lisp/public/") *dispatch-table*)
(#<CLOSURE (LAMBDA #) {1003E2ADF9}> #<CLOSURE (LAMBDA #) {1005028EF9}>
 DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (pop *dispatch-table*)
#<CLOSURE (LAMBDA (REQUEST)) {100522DB19}>
REMINDME> (pop *dispatch-table*)
#<CLOSURE (LAMBDA (REQUEST)) {100522DBD9}>
REMINDME> *dispatch-table*
(DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (defmacro standard-page ((&key title) &body body)
            `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
               (:html :xmlns "http://www.w3.org/1999/xhtml"
                      :xml\:lang "en"
                      :lang "en"
                      (:head
                       (:meta :http-equiv "Content-Type"
                              :content "text/html;charset=utf-8")
                       (:title ,title)
                       (:link :type "text/css"
                              :rel "stylesheet"
                              :href "/remindme.css")
                       (:script :type "text/javascript" 
                                :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
                      (:script :type "text/javascript"
                               :src "http://dev.jquery.com/view/trunk/plugins/validate/jquery.validate.js")
                      (:body
                       (:div :id "header"
                             (:img :src "/logo.jpg"
                                   :alt "Some image"
                                   :class "logo")
                             (:span :class "strapline"
                                    "Your friend's birthday in your pocket"))
                       ,@body))))
            
STANDARD-PAGE
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name" (:input :type :string :name "name" :label "Name"))
           (:p "Password" (:input :type :password :name "password") (:br))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (new-user-home :uri "/new-user-home") ()
  (let ((user (session-value 'current-user)))
    (if user
        (standard-page (:title (format nil "Welcome ~A" (user-name user)))
          (:h3 (format nil "Listing friends email and birthdays for ~A"
                       (user-name user)))
          (:ul 
           (dolist (x (user-friends-list user))
             (htm (:li (:span  :class "name" (str(friend-name x)))
                       (:span :class "email" (str (friend-email x)))
                       (:span :class "birthday" (str (encode-birthday-from-time 
                                                      (friend-birthday x)))))))))
        (redirect "/create-user"))))
STYLE-WARNING: redefining REMINDME::NEW-USER-HOME in DEFUN
NEW-USER-HOME
REMINDME> (define-easy-handler (new-user :uri "/new-user") ()
  "To create users from the form submitted by user"
  (let ((file (post-parameter "file1"))
        (name (post-parameter "name"))
        (password (post-parameter "password")))
    (log-message :info "POST ~A" (post-parameter "file1"))
    (log-message :info "POST:name ~A" name) 
    (log-message :info "FILE ~A" file)
    (when file
      (let ((path (handle-file file)))
        (log-message :info "Saved file to ~A" path)
        (setf (session-value 'current-user)  (create-user-from-form name password path))
        (redirect "/new-user-home" )))))
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
NEW-USER
REMINDME> (create-static-file-dispatcher-and-handler "/public/jquery.validate.js" "/home/manish/projects/lisp/public/jquery.validate.js" :content-type "text/javascript")
; Evaluation aborted.
REMINDME> (create-static-file-dispatcher-and-handler "/public/jquery.validate.js" "/home/manish/projects/lisp/public/jquery.validate.js" "text/javascript")
#<CLOSURE (LAMBDA (REQUEST)) {1005230509}>
REMINDME> (push (create-static-file-dispatcher-and-handler "/public/jquery.validate.js" "/home/manish/projects/lisp/public/jquery.validate.js" "text/javascript") *dispatch-table*)
(#<CLOSURE (LAMBDA #) {100366A859}> DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (defmacro standard-page ((&key title) &body body)
            `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
               (:html :xmlns "http://www.w3.org/1999/xhtml"
                      :xml\:lang "en"
                      :lang "en"
                      (:head
                       (:meta :http-equiv "Content-Type"
                              :content "text/html;charset=utf-8")
                       (:title ,title)
                       (:link :type "text/css"
                              :rel "stylesheet"
                              :href "/remindme.css")
                       (:script :type "text/javascript" 
                                :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
                      (:script :type "text/javascript"
                               :src "/public/jquery.validate.js")
                      (:body
                       (:div :id "header"
                             (:img :src "/logo.jpg"
                                   :alt "Some image"
                                   :class "logo")
                             (:span :class "strapline"
                                    "Your friend's birthday in your pocket"))
                       ,@body))))
            
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S MIN REMINDME::H REMINDME::D REMINDME::M REMINDME::Y)
;         (GET-DECODED-TIME)
;       REMINDME::Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (MIN) (REMINDME::H) (REMINDME::D)
;          (REMINDME::M) (REMINDME::Y)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       REMINDME::Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
; in: LAMBDA NIL
;     (DESTRUCTURING-BIND
;         (REMINDME::PATH REMINDME::FILE-NAME HUNCHENTOOT:CONTENT-TYPE)
;         HUNCHENTOOT:POST-PARAMETER
;       (LET ((REMINDME::NEW-PATH
;              (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                             REMINDME::*TMP-TEST-DIRECTORY*)))
;         (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                  (PATHNAME-NAME REMINDME::NEW-PATH))
;         (CL-FAD:COPY-FILE REMINDME::PATH
;                           (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                           :OVERWRITE T)
;         REMINDME::NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((REMINDME::PATH (CAR #:WHOLE0))
;          (REMINDME::FILE-NAME (CAR (CDR #:WHOLE0)))
;          (HUNCHENTOOT:CONTENT-TYPE (CAR (CDR #))))
;     (LET ((REMINDME::NEW-PATH
;            (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                           REMINDME::*TMP-TEST-DIRECTORY*)))
;       (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                (PATHNAME-NAME REMINDME::NEW-PATH))
;       (CL-FAD:COPY-FILE REMINDME::PATH
;                         (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                         :OVERWRITE T)
;       REMINDME::NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::NEW-USER-HOME in DEFUN
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH
;                              REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::H REMINDME::M REMINDME::S REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME REMINDME::DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::H) (REMINDME::M) (REMINDME::S) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME TIME)
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::ENCODE-BIRTHDAY-FROM-TIME in DEFUN
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
STANDARD-PAGE
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
            (standard-page (:title "Create a new assistant")
              (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
              (:form :class "cmxform" :id "commentForm"  :action "/new-user" :method :post :enctype "multipart/form-data"
                     (:p (:label :for "cname" "Name") (:em"*")
                         (:input :id "cname" :class "required" :minlength "2" :name "name"))
                     (:p "Password" (:input :type :password :name "password") (:br))
                     (:p "File"  (:input :type :file :name "file1"))
                     (:input :type :submit :value "Create user"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (defun make-user-friends-list-from-file (user-obj file)
  "Creates a friend list and adds it to user. May need refactor, since adding the list
to user and creating the list are two different things.
Assumes that first row is useless since it represents name,email,birthday. May need to
fix that to see if first row is valid data.
Also need to validate the emails provided."
  (let ((acc nil))
    (dolist (x (rest (fare-csv:read-csv-file file)))                    
      (destructuring-bind (name email birthday) x
        (pushnew  
         (make-friend 
          :name name 
          :email email 
          :birthday (read-date-from-string birthday)) 
         acc :test #'friend-equal)))
    (setf (user-friends-list user-obj) (sort acc #'closest-date :key friend-birthday))))

;     (SORT REMINDME::ACC #'REMINDME::CLOSEST-DATE :KEY REMINDME::FRIEND-BIRTHDAY)
; 
; caught WARNING:
;   undefined variable: FRIEND-BIRTHDAY
; 
; compilation unit finished
;   Undefined variable:
;     FRIEND-BIRTHDAY
;   caught 1 WARNING condition
STYLE-WARNING:
   redefining REMINDME::MAKE-USER-FRIENDS-LIST-FROM-FILE in DEFUN
MAKE-USER-FRIENDS-LIST-FROM-FILE
REMINDME> (create-user-from-form "shakeela" "password" "/home/manish/projects/lisp/web/learn/birthdays.cvs")
; Evaluation aborted.
REMINDME> (defun make-user-friends-list-from-file (user-obj file)
  "Creates a friend list and adds it to user. May need refactor, since adding the list
to user and creating the list are two different things.
Assumes that first row is useless since it represents name,email,birthday. May need to
fix that to see if first row is valid data.
Also need to validate the emails provided."
  (let ((acc nil))
    (dolist (x (rest (fare-csv:read-csv-file file)))                    
      (destructuring-bind (name email birthday) x
        (pushnew  
         (make-friend 
          :name name 
          :email email 
          :birthday (read-date-from-string birthday)) 
         acc :test #'friend-equal)))
    (setf (user-friends-list user-obj) (sort acc #'closest-date :key #'friend-birthday))))
STYLE-WARNING:
   redefining REMINDME::MAKE-USER-FRIENDS-LIST-FROM-FILE in DEFUN
MAKE-USER-FRIENDS-LIST-FROM-FILE
REMINDME> (create-user-from-form "shakeela" "password" "/home/manish/projects/lisp/web/learn/birthdays.cvs")
#S(USER
   :NAME "shakeela"
   :PASSWORD "password"
   :FRIENDS-LIST (#S(FRIEND
                     :NAME "Sahana"
                     :EMAIL "sahanaym@gmail.com"
                     :BIRTHDAY 2452876200)
                  #S(FRIEND
                     :NAME "Shakeela"
                     :EMAIL "shakeela.jb@gmail.com"
                     :BIRTHDAY 2618073000)
                  #S(FRIEND
                     :NAME "Manish YM"
                     :EMAIL "manishym@gmail.com"
                     :BIRTHDAY 2587141800)
                  #S(FRIEND
                     :NAME "Noorie"
                     :EMAIL "noorie@noorie.com"
                     :BIRTHDAY 2417020200)))
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (maphash #'birthday-collector database))

;     #'REMINDME::BIRTHDAY-COLLECTOR
; 
; caught STYLE-WARNING:
;   undefined function: BIRTHDAY-COLLECTOR
; 
; compilation unit finished
;   Undefined function:
;     BIRTHDAY-COLLECTOR
;   caught 1 STYLE-WARNING condition
GET-NEXT-BIRTHDAY
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (user-name user)))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
("shakeela")
REMINDME> (create-user-from-form "Manish" "password" "/home/manish/projects/lisp/web/learn/birthdays.cvs")
#S(USER
   :NAME "Manish"
   :PASSWORD "password"
   :FRIENDS-LIST (#S(FRIEND
                     :NAME "Sahana"
                     :EMAIL "sahanaym@gmail.com"
                     :BIRTHDAY 2452876200)
                  #S(FRIEND
                     :NAME "Shakeela"
                     :EMAIL "shakeela.jb@gmail.com"
                     :BIRTHDAY 2618073000)
                  #S(FRIEND
                     :NAME "Manish YM"
                     :EMAIL "manishym@gmail.com"
                     :BIRTHDAY 2587141800)
                  #S(FRIEND
                     :NAME "Noorie"
                     :EMAIL "noorie@noorie.com"
                     :BIRTHDAY 2417020200)))
REMINDME> (create-user-from-form "1t" "password" "/home/manish/projects/lisp/web/learn/birthdays.cvs")
#S(USER
   :NAME "1t"
   :PASSWORD "password"
   :FRIENDS-LIST (#S(FRIEND
                     :NAME "Sahana"
                     :EMAIL "sahanaym@gmail.com"
                     :BIRTHDAY 2452876200)
                  #S(FRIEND
                     :NAME "Shakeela"
                     :EMAIL "shakeela.jb@gmail.com"
                     :BIRTHDAY 2618073000)
                  #S(FRIEND
                     :NAME "Manish YM"
                     :EMAIL "manishym@gmail.com"
                     :BIRTHDAY 2587141800)
                  #S(FRIEND
                     :NAME "Noorie"
                     :EMAIL "noorie@noorie.com"
                     :BIRTHDAY 2417020200)))
REMINDME> (get-next-birthday)
("shakeela" "Manish" "1t")
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (first (user-friends-list user))))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
(#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
 #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
 #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200))
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (first (user-friends-list user))))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-user "shakeela")
#S(USER
   :NAME "shakeela"
   :PASSWORD "password"
   :FRIENDS-LIST (#S(FRIEND
                     :NAME "Sahana"
                     :EMAIL "sahanaym@gmail.com"
                     :BIRTHDAY 2452876200)
                  #S(FRIEND
                     :NAME "Shakeela"
                     :EMAIL "shakeela.jb@gmail.com"
                     :BIRTHDAY 2618073000)
                  #S(FRIEND
                     :NAME "Manish YM"
                     :EMAIL "manishym@gmail.com"
                     :BIRTHDAY 2587141800)
                  #S(FRIEND
                     :NAME "Noorie"
                     :EMAIL "noorie@noorie.com"
                     :BIRTHDAY 2417020200)))
T
REMINDME> (defun get-next-birthday (user)
            (list user (first (user-friends-list user))))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (get-next-birthday user)))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
; Evaluation aborted.
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (user-name user)))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
("shakeela" "Manish" "1t")
REMINDME> (defun collect-user-and-friend (user)
            (list user (first user-friends-list user)))
; in: LAMBDA NIL
;     (FIRST REMINDME::USER-FRIENDS-LIST REMINDME::USER)
; 
; caught WARNING:
;   The function was called with two arguments, but wants exactly one.

;     (FIRST REMINDME::USER-FRIENDS-LIST REMINDME::USER)
; 
; caught WARNING:
;   undefined variable: USER-FRIENDS-LIST
; 
; compilation unit finished
;   Undefined variable:
;     USER-FRIENDS-LIST
;   caught 2 WARNING conditions
COLLECT-USER-AND-FRIEND
REMINDME> (defun collect-user-and-friend (user)
            (list user (first (user-friends-list user))))
STYLE-WARNING: redefining REMINDME::COLLECT-USER-AND-FRIEND in DEFUN
COLLECT-USER-AND-FRIEND
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (collect-user-and-friend user)))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
((#S(USER
     :NAME "shakeela"
     :PASSWORD "password"
     :FRIENDS-LIST (#S(FRIEND
                       :NAME "Sahana"
                       :EMAIL "sahanaym@gmail.com"
                       :BIRTHDAY 2452876200)
                    #S(FRIEND
                       :NAME "Shakeela"
                       :EMAIL "shakeela.jb@gmail.com"
                       :BIRTHDAY 2618073000)
                    #S(FRIEND
                       :NAME "Manish YM"
                       :EMAIL "manishym@gmail.com"
                       :BIRTHDAY 2587141800)
                    #S(FRIEND
                       :NAME "Noorie"
                       :EMAIL "noorie@noorie.com"
                       :BIRTHDAY 2417020200)))
  #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200))
 (#S(USER
     :NAME "Manish"
     :PASSWORD "password"
     :FRIENDS-LIST (#S(FRIEND
                       :NAME "Sahana"
                       :EMAIL "sahanaym@gmail.com"
                       :BIRTHDAY 2452876200)
                    #S(FRIEND
                       :NAME "Shakeela"
                       :EMAIL "shakeela.jb@gmail.com"
                       :BIRTHDAY 2618073000)
                    #S(FRIEND
                       :NAME "Manish YM"
                       :EMAIL "manishym@gmail.com"
                       :BIRTHDAY 2587141800)
                    #S(FRIEND
                       :NAME "Noorie"
                       :EMAIL "noorie@noorie.com"
                       :BIRTHDAY 2417020200)))
  #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200))
 (#S(USER
     :NAME "1t"
     :PASSWORD "password"
     :FRIENDS-LIST (#S(FRIEND
                       :NAME "Sahana"
                       :EMAIL "sahanaym@gmail.com"
                       :BIRTHDAY 2452876200)
                    #S(FRIEND
                       :NAME "Shakeela"
                       :EMAIL "shakeela.jb@gmail.com"
                       :BIRTHDAY 2618073000)
                    #S(FRIEND
                       :NAME "Manish YM"
                       :EMAIL "manishym@gmail.com"
                       :BIRTHDAY 2587141800)
                    #S(FRIEND
                       :NAME "Noorie"
                       :EMAIL "noorie@noorie.com"
                       :BIRTHDAY 2417020200)))
  #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)))
REMINDME> (first (user-friends-list (get-user "shakeela")))
#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
REMINDME> (collect-user-and-friend (get-user "shakeela"))
(#S(USER
    :NAME "shakeela"
    :PASSWORD "password"
    :FRIENDS-LIST (#S(FRIEND
                      :NAME "Sahana"
                      :EMAIL "sahanaym@gmail.com"
                      :BIRTHDAY 2452876200)
                   #S(FRIEND
                      :NAME "Shakeela"
                      :EMAIL "shakeela.jb@gmail.com"
                      :BIRTHDAY 2618073000)
                   #S(FRIEND
                      :NAME "Manish YM"
                      :EMAIL "manishym@gmail.com"
                      :BIRTHDAY 2587141800)
                   #S(FRIEND
                      :NAME "Noorie"
                      :EMAIL "noorie@noorie.com"
                      :BIRTHDAY 2417020200)))
 #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200))
REMINDME> (defun collect-user-name-and-friend (user)
            (list (user-name user) (first (user-friends-list user))))
COLLECT-USER-NAME-AND-FRIEND
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (collect-user-name-and-friend user)))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
(("shakeela"
  #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200))
 ("Manish"
  #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200))
 ("1t"
  #S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)))
REMINDME> (defun get-user-and-birthday-friend-if-birthday-is-near (user)
            (if (within-n-days (friend-birthday (first (user-friends-list user))) (ignore-year (today)) *remainder-days*)
                user
                nil))

;     (REMINDME::WITHIN-N-DAYS
;      (REMINDME::FRIEND-BIRTHDAY
;       (FIRST (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;      (REMINDME::IGNORE-YEAR (REMINDME::TODAY)) REMINDME::*REMAINDER-DAYS*)
; 
; caught WARNING:
;   undefined variable: *REMAINDER-DAYS*
; 
; caught STYLE-WARNING:
;   undefined function: WITHIN-N-DAYS
; 
; compilation unit finished
;   Undefined function:
;     WITHIN-N-DAYS
;   Undefined variable:
;     *REMAINDER-DAYS*
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
GET-USER-AND-BIRTHDAY-FRIEND-IF-BIRTHDAY-IS-NEAR
REMINDME> (setf *remainder-days* 3)

;     (SETF REMINDME::*REMAINDER-DAYS* 3)
; ==>
;   (SETQ REMINDME::*REMAINDER-DAYS* 3)
; 
; caught WARNING:
;   undefined variable: *REMAINDER-DAYS*
; 
; compilation unit finished
;   Undefined variable:
;     *REMAINDER-DAYS*
;   caught 1 WARNING condition
3
REMINDME> (defun within-n-days (date from n)
            (let ((day (ignore-year date))
                  (frm (ignore-year from)))
              (let ((diff (- frm day)))
                (between diff 0 n))))
              
                  
WITHIN-N-DAYS
REMINDME> (within-n-days (today) (add-days (today) 3) 4)
NIL
REMINDME> (within-n-days (today) (add-days (today) 3) 5)
NIL
REMINDME> (within-n-days (today) (add-days (today) 8) 5)
NIL
REMINDME> (trace between)
(BETWEEN)
REMINDME> (within-n-days (today) (add-days (today) 8) 5)
  0: (BETWEEN 691200 0 5)
  0: BETWEEN returned NIL
NIL
REMINDME> (defun within-n-days (date from n)
            (let ((day (ignore-year date))
                  (frm (ignore-year from)))
              (let ((diff (- frm day)))
                (between diff 0 (* n (seconds-in-a-day))))))
              
                  
STYLE-WARNING: redefining REMINDME::WITHIN-N-DAYS in DEFUN
WITHIN-N-DAYS
REMINDME> (within-n-days (today) (add-days (today) 8) 5)
  0: (BETWEEN 691200 0 432000)
  0: BETWEEN returned NIL
NIL
REMINDME> (within-n-days (today) (add-days (today) 3) 5)
  0: (BETWEEN 259200 0 432000)
  0: BETWEEN returned 259200
259200
REMINDME> (untrace)
T
REMINDME> (get-user-and-birthday-friend-if-birthday-is-near (get-user "shakeela"))
NIL
REMINDME> (trace within-n-days)
(WITHIN-N-DAYS)
REMINDME> (get-user-and-birthday-friend-if-birthday-is-near (get-user "shakeela"))
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
  0: WITHIN-N-DAYS returned NIL
NIL
REMINDME> (trace between)
(BETWEEN)
REMINDME> (get-user-and-birthday-friend-if-birthday-is-near (get-user "shakeela"))
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
    1: (BETWEEN -86400 0 259200)
    1: BETWEEN returned NIL
  0: WITHIN-N-DAYS returned NIL
NIL
REMINDME> (defun get-user-and-birthday-friend-if-birthday-is-near (user)
            (if (within-n-days (friend-birthday (first (user-friends-list user))) (ignore-year (today)) *remainder-days*)
                user
                nil))

;     (REMINDME::WITHIN-N-DAYS
;      (REMINDME::FRIEND-BIRTHDAY
;       (FIRST (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;      (REMINDME::IGNORE-YEAR (REMINDME::TODAY)) REMINDME::*REMAINDER-DAYS*)
; 
; caught WARNING:
;   undefined variable: *REMAINDER-DAYS*
; 
; compilation unit finished
;   Undefined variable:
;     *REMAINDER-DAYS*
;   caught 1 WARNING condition
STYLE-WARNING:
   redefining REMINDME::GET-USER-AND-BIRTHDAY-FRIEND-IF-BIRTHDAY-IS-NEAR in DEFUN
GET-USER-AND-BIRTHDAY-FRIEND-IF-BIRTHDAY-IS-NEAR
REMINDME> (setf *remainder-days* 3)

;     (SETF REMINDME::*REMAINDER-DAYS* 3)
; ==>
;   (SETQ REMINDME::*REMAINDER-DAYS* 3)
; 
; caught WARNING:
;   undefined variable: *REMAINDER-DAYS*
; 
; compilation unit finished
;   Undefined variable:
;     *REMAINDER-DAYS*
;   caught 1 WARNING condition
3
REMINDME> (defun get-user-and-birthday-friend-if-birthday-is-near (user)
            (if (within-n-days (friend-birthday (first (user-friends-list user))) (ignore-year (today)) *remainder-days*)
                user
                nil))

;     (REMINDME::WITHIN-N-DAYS
;      (REMINDME::FRIEND-BIRTHDAY
;       (FIRST (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;      (REMINDME::IGNORE-YEAR (REMINDME::TODAY)) REMINDME::*REMAINDER-DAYS*)
; 
; caught WARNING:
;   undefined variable: *REMAINDER-DAYS*
; 
; compilation unit finished
;   Undefined variable:
;     *REMAINDER-DAYS*
;   caught 1 WARNING condition
STYLE-WARNING:
   redefining REMINDME::GET-USER-AND-BIRTHDAY-FRIEND-IF-BIRTHDAY-IS-NEAR in DEFUN
GET-USER-AND-BIRTHDAY-FRIEND-IF-BIRTHDAY-IS-NEAR
REMINDME> (get-user-and-birthday-friend-if-birthday-is-near (get-user "shakeela"))
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
    1: (BETWEEN -86400 0 259200)
    1: BETWEEN returned NIL
  0: WITHIN-N-DAYS returned NIL
NIL
REMINDME> (within-n-days (today) (add-days (today) 367) 5)
  0: (WITHIN-N-DAYS 3525705000 3557413800 5)
    1: (BETWEEN 86400 0 432000)
    1: BETWEEN returned 86400
  0: WITHIN-N-DAYS returned 86400
86400
REMINDME> (within-n-days (today) (add-days (today) -364) 5)
  0: (WITHIN-N-DAYS 3525705000 3494255400 5)
    1: (BETWEEN 86400 0 432000)
    1: BETWEEN returned 86400
  0: WITHIN-N-DAYS returned 86400
86400
REMINDME> (defun within-n-days (from date n)
            (let ((day (ignore-year date))
                  (frm (ignore-year from)))
              (let ((diff (- frm day)))
                (between diff 0 (* n (seconds-in-a-day))))))
              
                  
STYLE-WARNING: redefining REMINDME::WITHIN-N-DAYS in DEFUN
WITHIN-N-DAYS
REMINDME> (get-user-and-birthday-friend-if-birthday-is-near (get-user "shakeela"))
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
    1: (BETWEEN 86400 0 259200)
    1: BETWEEN returned 86400
  0: WITHIN-N-DAYS returned 86400
#S(USER
   :NAME "shakeela"
   :PASSWORD "password"
   :FRIENDS-LIST (#S(FRIEND
                     :NAME "Sahana"
                     :EMAIL "sahanaym@gmail.com"
                     :BIRTHDAY 2452876200)
                  #S(FRIEND
                     :NAME "Shakeela"
                     :EMAIL "shakeela.jb@gmail.com"
                     :BIRTHDAY 2618073000)
                  #S(FRIEND
                     :NAME "Manish YM"
                     :EMAIL "manishym@gmail.com"
                     :BIRTHDAY 2587141800)
                  #S(FRIEND
                     :NAME "Noorie"
                     :EMAIL "noorie@noorie.com"
                     :BIRTHDAY 2417020200)))
REMINDME> (defun get-next-birthday (&optional (database *database-of-users*))
            (loop for user being the hash-value of database collect (get-user-and-birthday-friend-if-birthday-is-near user)))
STYLE-WARNING: redefining REMINDME::GET-NEXT-BIRTHDAY in DEFUN
GET-NEXT-BIRTHDAY
REMINDME> (get-next-birthday)
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
    1: (BETWEEN 86400 0 259200)
    1: BETWEEN returned 86400
  0: WITHIN-N-DAYS returned 86400
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
    1: (BETWEEN 86400 0 259200)
    1: BETWEEN returned 86400
  0: WITHIN-N-DAYS returned 86400
  0: (WITHIN-N-DAYS 2452876200 3178636200 3)
    1: (BETWEEN 86400 0 259200)
    1: BETWEEN returned 86400
  0: WITHIN-N-DAYS returned 86400
(#S(USER
    :NAME "shakeela"
    :PASSWORD "password"
    :FRIENDS-LIST (#S(FRIEND
                      :NAME "Sahana"
                      :EMAIL "sahanaym@gmail.com"
                      :BIRTHDAY 2452876200)
                   #S(FRIEND
                      :NAME "Shakeela"
                      :EMAIL "shakeela.jb@gmail.com"
                      :BIRTHDAY 2618073000)
                   #S(FRIEND
                      :NAME "Manish YM"
                      :EMAIL "manishym@gmail.com"
                      :BIRTHDAY 2587141800)
                   #S(FRIEND
                      :NAME "Noorie"
                      :EMAIL "noorie@noorie.com"
                      :BIRTHDAY 2417020200)))
 #S(USER
    :NAME "Manish"
    :PASSWORD "password"
    :FRIENDS-LIST (#S(FRIEND
                      :NAME "Sahana"
                      :EMAIL "sahanaym@gmail.com"
                      :BIRTHDAY 2452876200)
                   #S(FRIEND
                      :NAME "Shakeela"
                      :EMAIL "shakeela.jb@gmail.com"
                      :BIRTHDAY 2618073000)
                   #S(FRIEND
                      :NAME "Manish YM"
                      :EMAIL "manishym@gmail.com"
                      :BIRTHDAY 2587141800)
                   #S(FRIEND
                      :NAME "Noorie"
                      :EMAIL "noorie@noorie.com"
                      :BIRTHDAY 2417020200)))
 #S(USER
    :NAME "1t"
    :PASSWORD "password"
    :FRIENDS-LIST (#S(FRIEND
                      :NAME "Sahana"
                      :EMAIL "sahanaym@gmail.com"
                      :BIRTHDAY 2452876200)
                   #S(FRIEND
                      :NAME "Shakeela"
                      :EMAIL "shakeela.jb@gmail.com"
                      :BIRTHDAY 2618073000)
                   #S(FRIEND
                      :NAME "Manish YM"
                      :EMAIL "manishym@gmail.com"
                      :BIRTHDAY 2587141800)
                   #S(FRIEND
                      :NAME "Noorie"
                      :EMAIL "noorie@noorie.com"
                      :BIRTHDAY 2417020200))))
REMINDME> (untrace)
T
REMINDME> 
CL-USER> (defmacro memq (obj lst) 
           `(member ,obj ,lst :test #'eql))
MEMQ
CL-USER> (macroexpand-1 '(memq x choices))
(MEMBER X CHOICES :TEST #'EQL)
T
CL-USER> (defmacro memq (obj lst) 
           `(member ,obj ,lst :test #'eq))
MEMQ
CL-USER> (macroexpand-1 '(memq x choices))
(MEMBER X CHOICES :TEST #'EQ)
T
CL-USER> (defmacro while (test &body body)
           `(do ()
                ((not ,test))
              ,@body))
WHILE
CL-USER> (let ((i 0))
           (while (< i 10)
             (incf i)
             (format t "i:~A~%" i)))
i:1
i:2
i:3
i:4
i:5
i:6
i:7
i:8
i:9
i:10
NIL
CL-USER> (defmacro mac (expr)
           `(pprint (macroexpand-1 ',expr)))
MAC
CL-USER> (mac
           (while (< i 10)
             (incf i)
             (format t "i:~A~%" i)))

(DO () ((NOT (< I 10))) (INCF I) (FORMAT T "i:~A~%" I))
; No value
CL-USER> (mac (memq x list))

(MEMBER X LIST :TEST #'EQ)
; No value
CL-USER> (defmacro when-bind ((var expr) &body body)
           `(let ((,var ,expr))
              (when ,var
                ,@body)))
WHEN-BIND
CL-USER> (mac (when-bind (x (user-name user))
                (pprint user-name)))

(LET ((X (USER-NAME USER)))
  (WHEN X (PPRINT USER-NAME)))

; compiling file "/home/manish/projects/lisp/web/learn/remind-me-layer1.lisp" (written 23 SEP 2011 09:29:57 PM):

; file: /home/manish/projects/lisp/web/learn/remind-me-layer1.lisp
; in: DEFUN CURRENT-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S MIN REMINDME::H REMINDME::D REMINDME::M REMINDME::Y)
;         (GET-DECODED-TIME)
;       REMINDME::Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (MIN) (REMINDME::H) (REMINDME::D)
;          (REMINDME::M) (REMINDME::Y)
;          &REST #:G89)
;       (DECLARE (IGNORE #:G89))
;       REMINDME::Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.

; in: DEFUN HANDLE-FILE
;     (DESTRUCTURING-BIND
;         (REMINDME::PATH REMINDME::FILE-NAME HUNCHENTOOT:CONTENT-TYPE)
;         HUNCHENTOOT:POST-PARAMETER
;       (LET ((REMINDME::NEW-PATH
;              (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                             REMINDME::*TMP-TEST-DIRECTORY*)))
;         (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                  (PATHNAME-NAME REMINDME::NEW-PATH))
;         (CL-FAD:COPY-FILE REMINDME::PATH
;                           (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                           :OVERWRITE T)
;         REMINDME::NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((REMINDME::PATH (CAR #:WHOLE147))
;          (REMINDME::FILE-NAME (CAR (CDR #:WHOLE147)))
;          (HUNCHENTOOT:CONTENT-TYPE (CAR (CDR #))))
;     (LET ((REMINDME::NEW-PATH
;            (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                           REMINDME::*TMP-TEST-DIRECTORY*)))
;       (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                (PATHNAME-NAME REMINDME::NEW-PATH))
;       (CL-FAD:COPY-FILE REMINDME::PATH
;                         (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                         :OVERWRITE T)
;       REMINDME::NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.

; in: DEFUN TODAY
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G154)
;       (DECLARE (IGNORE #:G154))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH
;                              REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.

; in: DEFUN IGNORE-YEAR
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::H REMINDME::M REMINDME::S REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME REMINDME::DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::H) (REMINDME::M) (REMINDME::S) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G162)
;       (DECLARE (IGNORE #:G162))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.

; in: DEFUN ENCODE-BIRTHDAY-FROM-TIME
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME TIME)
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON) (REMINDME::YEAR)
;          &REST #:G176)
;       (DECLARE (IGNORE #:G176))
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; compilation unit finished
;   caught 16 STYLE-WARNING conditions

; /home/manish/projects/lisp/web/learn/remind-me-layer1.fasl written
; compilation finished in 0:00:00.171
STYLE-WARNING: redefining REMINDME::AMERICAN-REPRESENTATION in DEFUN
STYLE-WARNING: redefining REMINDME::INDIAN-REPRESENTATION in DEFUN
STYLE-WARNING: redefining REMINDME::BETWEEN in DEFUN
STYLE-WARNING: redefining REMINDME::CURRENT-YEAR in DEFUN
STYLE-WARNING: redefining REMINDME::READ-DATE-FROM-STRING in DEFUN
STYLE-WARNING: redefining REMINDME::SEND-EMAIL in DEFUN
STYLE-WARNING: redefining REMINDME::HANDLE-FILE in DEFUN
STYLE-WARNING: redefining REMINDME::TODAY in DEFUN
STYLE-WARNING: redefining REMINDME::ADD-DAYS in DEFUN
STYLE-WARNING: redefining REMINDME::SECONDS-IN-A-DAY in DEFUN
STYLE-WARNING: redefining REMINDME::IGNORE-YEAR in DEFUN
STYLE-WARNING: redefining REMINDME::CLOSEST-DATE in DEFUN
STYLE-WARNING: redefining REMINDME::ENCODE-BIRTHDAY-FROM-TIME in DEFUN
STYLE-WARNING: redefining REMINDME::DATE< in DEFUN
STYLE-WARNING: redefining REMINDME::WITHIN-N-DAYS in DEFUN
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S MIN REMINDME::H REMINDME::D REMINDME::M REMINDME::Y)
;         (GET-DECODED-TIME)
;       REMINDME::Y)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (MIN) (REMINDME::H) (REMINDME::D)
;          (REMINDME::M) (REMINDME::Y)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       REMINDME::Y)
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MIN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable D is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
; in: LAMBDA NIL
;     (DESTRUCTURING-BIND
;         (REMINDME::PATH REMINDME::FILE-NAME HUNCHENTOOT:CONTENT-TYPE)
;         HUNCHENTOOT:POST-PARAMETER
;       (LET ((REMINDME::NEW-PATH
;              (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                             REMINDME::*TMP-TEST-DIRECTORY*)))
;         (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                  (PATHNAME-NAME REMINDME::NEW-PATH))
;         (CL-FAD:COPY-FILE REMINDME::PATH
;                           (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                           :OVERWRITE T)
;         REMINDME::NEW-PATH))
; --> LET LET* 
; ==>
;   (LET* ((REMINDME::PATH (CAR #:WHOLE0))
;          (REMINDME::FILE-NAME (CAR (CDR #:WHOLE0)))
;          (HUNCHENTOOT:CONTENT-TYPE (CAR (CDR #))))
;     (LET ((REMINDME::NEW-PATH
;            (MAKE-PATHNAME :NAME REMINDME::FILE-NAME :TYPE NIL :DEFAULTS
;                           REMINDME::*TMP-TEST-DIRECTORY*)))
;       (HUNCHENTOOT:LOG-MESSAGE "New-path ~A"
;                                (PATHNAME-NAME REMINDME::NEW-PATH))
;       (CL-FAD:COPY-FILE REMINDME::PATH
;                         (ENSURE-DIRECTORIES-EXIST REMINDME::NEW-PATH)
;                         :OVERWRITE T)
;       REMINDME::NEW-PATH))
; 
; caught STYLE-WARNING:
;   The variable CONTENT-TYPE is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (GET-DECODED-TIME)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH
;                              REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::H REMINDME::M REMINDME::S REMINDME::DAY REMINDME::MONTH
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME REMINDME::DATE)
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::H) (REMINDME::M) (REMINDME::S) (REMINDME::DAY)
;          (REMINDME::MONTH) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (ENCODE-UNIVERSAL-TIME 0 0 0 REMINDME::DAY REMINDME::MONTH 0))
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable YEAR is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;          REMINDME::YEAR)
;         (DECODE-UNIVERSAL-TIME TIME)
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON) (REMINDME::YEAR)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0))
;       (FORMAT NIL "~A.~A.~A" REMINDME::MON REMINDME::DAY REMINDME::YEAR))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
; No value
CL-USER> 
REMINDME> (ql:quickload 'clon)
To load "clon":
  Load 1 ASDF system:
    bordeaux-threads
  Install 2 Quicklisp releases:
    clon trivial-timers
; Fetching #<URL "http://beta.quicklisp.org/archive/trivial-timers/2010-10-06/trivial-timers-20101006-http.tgz">
; 3.97KB
==================================================
4,064 bytes in 0.004 seconds (992.19KB/sec)
; Fetching #<URL "http://beta.quicklisp.org/archive/clon/2011-03-20/clon-20110320-git.tgz">
; 7.74KB
==================================================
7,926 bytes in 0.001 seconds (7740.23KB/sec)
; Loading "clon"
..................................................
[package trivial-timers]..........................
[package clon]..
(CLON)
REMINDME> (clon:make-typed-cron-schedule :second '(member 10 20 30 50 60))
#<CLON:CRON-SCHEDULE {10055EA981}>
REMINDME> (clon:make-scheduler *)
#<CLOSURE (LAMBDA ()) {1003FFD369}>
REMINDME> (clon:schedule-function (lambda ()
                                    (print (get-universal-time))) *)

3525819241 
3525819241 
3525819241 
3525819241 
3525819241 #<SB-EXT:TIMER {10051896F1}>
REMINDME> 


3525819250 
3525819260 
3525819270 
3525819290 
3525819310 ; No value
REMINDME> (trivial-timers:unschedule-timer *)
; Evaluation aborted.
REMINDME> (trivial-timers:unschedule-timer **)

; No value
REMINDME> **
NIL
REMINDME> ***
NIL
REMINDME> *****
; Evaluation aborted.
REMINDME> (setf my-timer (clon:schedule-function (print "Hello") (clon:make-scheduler (clon:make-typed-cron-schedule :second 23 :minute 14 :hour 8))))
; in: LAMBDA NIL
;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION (PRINT "Hello")
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 23
;                                                                     :MINUTE 14
;                                                                     :HOUR 8))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION (PRINT "Hello")
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 23
;                                                                   :MINUTE 14
;                                                                   :HOUR 8))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition

"Hello" 
#<SB-EXT:TIMER {1005187F71}>
REMINDME> (decode-universal-time (get-universal-time))
38
13
8
24
9
2011
5
NIL
-11/2
REMINDME> (decode-universal-time (get-universal-time))
47
13
8
24
9
2011
5
NIL
-11/2
REMINDME> (decode-universal-time (get-universal-time))
0
14
8
24
9
2011
5
NIL
-11/2
REMINDME> (decode-universal-time (get-universal-time))
21
14
8
24
9
2011
5
NIL
-11/2
REMINDME> (sb-ext:unschedule-timer my-timer)
; No value
REMINDME> (sb-ext:unschedule-timer my-timer)
; No value
REMINDME> my-timer
#<SB-EXT:TIMER {1005187F71}>
REMINDME> (setf my-timer (clon:schedule-function (format t "Hello Dashi") (clon:make-scheduler (clon:make-typed-cron-schedule :second 23 :minute 20 :hour 8))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION (FORMAT T "Hello Dashi")
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 23
;                                                                     :MINUTE 20
;                                                                     :HOUR 8))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION (FORMAT T "Hello Dashi")
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 23
;                                                                   :MINUTE 20
;                                                                   :HOUR 8))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
Hello Dashi
#<SB-EXT:TIMER {100555C831}>
REMINDME> (sb-ext:unschedule-timer my-timer)
; No value
REMINDME> (setf my-timer (clon:schedule-function (format t "Hello Dashi") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 54 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION (FORMAT T "Hello Dashi")
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                     :MINUTE 54
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION (FORMAT T "Hello Dashi")
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                   :MINUTE 54
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
Hello Dashi
#<SB-EXT:TIMER {1003394CC1}>
REMINDME> (get-decoded-time)
59
53
23
24
9
2011
5
NIL
-11/2
REMINDME> (setf my-timer (clon:schedule-function '(format t "Hello Dashi") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 54 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION '(FORMAT T "Hello Dashi")
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                     :MINUTE 54
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION '(FORMAT T "Hello Dashi")
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                   :MINUTE 54
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {1003A65001}>
REMINDME> (setf my-timer (clon:schedule-function '(format t "Hello Dashi") (clon:make-scheduler (clon:make-typed-cron-schedule :second 50 :minute 54 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION '(FORMAT T "Hello Dashi")
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50
;                                                                     :MINUTE 54
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION '(FORMAT T "Hello Dashi")
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50
;                                                                   :MINUTE 54
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {1003B2EC61}>
REMINDME> (setf my-timer (clon:schedule-function #'(format t "Hello Dashi") (clon:make-scheduler (clon:make-typed-cron-schedule :second 30 :minute 55 :hour 23))))
; in: LAMBDA NIL
;     #'(FORMAT T "Hello Dashi")
; 
; caught ERROR:
;   (FORMAT T "Hello Dashi") is not a legal function name.

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION #'(FORMAT T "Hello Dashi")
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 30
;                                                                     :MINUTE 55
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION #'(FORMAT T "Hello Dashi")
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 30
;                                                                   :MINUTE 55
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 ERROR condition
;   caught 1 WARNING condition
; Evaluation aborted.
REMINDME> (setf my-timer (clon:schedule-function '#(lambda (X) (format t "Hello Dashi")) (clon:make-scheduler (clon:make-typed-cron-schedule :second 50 :minute 54 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION
;              '#(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;              (CLON:MAKE-SCHEDULER
;               (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50 :MINUTE 54 :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION
;            '#(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;            (CLON:MAKE-SCHEDULER
;             (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50 :MINUTE 54 :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {1002D696C1}>
REMINDME> (setf my-timer (clon:schedule-function '#(lambda (X) (format t "Hello Dashi")) (clon:make-scheduler (clon:make-typed-cron-schedule :second 50 :minute 55 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION
;              '#(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;              (CLON:MAKE-SCHEDULER
;               (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50 :MINUTE 55 :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION
;            '#(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;            (CLON:MAKE-SCHEDULER
;             (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50 :MINUTE 55 :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {1002E086C1}>
REMINDME> (setf my-timer (clon:schedule-function '#(lambda (X) (format t "Hello Dashi")) (clon:make-scheduler (clon:make-typed-cron-schedule :second 30 :minute 56 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION
;              '#(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;              (CLON:MAKE-SCHEDULER
;               (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 30 :MINUTE 56 :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION
;            '#(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;            (CLON:MAKE-SCHEDULER
;             (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 30 :MINUTE 56 :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {10030056C1}>
REMINDME> (setf my-timer (clon:schedule-function '(lambda (X) (format t "Hello Dashi")) (clon:make-scheduler (clon:make-typed-cron-schedule :second 30 :minute 56 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION
;              '(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;              (CLON:MAKE-SCHEDULER
;               (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 30 :MINUTE 56 :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION
;            '(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;            (CLON:MAKE-SCHEDULER
;             (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 30 :MINUTE 56 :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {10034A06B1}>
REMINDME> (setf my-timer (clon:schedule-function '(lambda (X) (format t "Hello Dashi")) (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 57 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION
;              '(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;              (CLON:MAKE-SCHEDULER
;               (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0 :MINUTE 57 :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION
;            '(LAMBDA (REMINDME::X) (FORMAT T "Hello Dashi"))
;            (CLON:MAKE-SCHEDULER
;             (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0 :MINUTE 57 :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {10036E56A1}>
REMINDME> (defun say-hello ()
            (format t "Hello world")) 
SAY-HELLO
REMINDME> (setf my-timer (clon:schedule-function 'say-hello (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 57 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION 'REMINDME::SAY-HELLO
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                     :MINUTE 57
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION 'REMINDME::SAY-HELLO
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                   :MINUTE 57
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {1003B1DF81}>
REMINDME> (setf my-timer (clon:schedule-function 'say-hello (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 59 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION 'REMINDME::SAY-HELLO
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                     :MINUTE 59
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION 'REMINDME::SAY-HELLO
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                   :MINUTE 59
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
Hello world#<SB-EXT:TIMER {1003BA0F81}>
REMINDME> (setf my-timer (clon:schedule-function 'say-hello (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 57 :hour 23))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION 'REMINDME::SAY-HELLO
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                     :MINUTE 57
;                                                                     :HOUR 23))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION 'REMINDME::SAY-HELLO
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                   :MINUTE 57
;                                                                   :HOUR 23))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {10034C7F81}>
REMINDME> (defun make-birthday-mailer-function (user friend-name)
            (let (friend-list (remove-if #'(lambda (friend)
                                             (equal friend-name (friend-name friend)))
                                             (user-friends-list user)))
              #'(lambda ()
                  (send-birthday-email-to-friend-list friend-name friend-list))))
; in: LAMBDA NIL
;     (LET (REMINDME::FRIEND-LIST
;           (REMOVE-IF
;            #'(LAMBDA (REMINDME::FRIEND) (EQUAL REMINDME::FRIEND-NAME #))
;            (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;       #'(LAMBDA ()
;           (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST REMINDME::FRIEND-NAME
;            REMINDME::FRIEND-LIST)))
; 
; caught ERROR:
;   The LET binding spec (REMOVE-IF
;                         #'(LAMBDA (FRIEND)
;                             (EQUAL FRIEND-NAME (FRIEND-NAME FRIEND)))
;                         (USER-FRIENDS-LIST USER)) is malformed.

;     (SB-INT:NAMED-LAMBDA REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;         (REMINDME::USER REMINDME::FRIEND-NAME)
;       (BLOCK REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;         (LET (REMINDME::FRIEND-LIST (REMOVE-IF #'# #))
;           #'(LAMBDA ()
;               (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST REMINDME::FRIEND-NAME
;                REMINDME::FRIEND-LIST)))))
; ==>
;   #'(SB-INT:NAMED-LAMBDA REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;         (REMINDME::USER REMINDME::FRIEND-NAME)
;       (BLOCK REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;         (LET (REMINDME::FRIEND-LIST (REMOVE-IF #'# #))
;           #'(LAMBDA ()
;               (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
;                REMINDME::FRIEND-NAME REMINDME::FRIEND-LIST)))))
; 
; caught STYLE-WARNING:
;   The variable USER is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable FRIEND-NAME is defined but never used.
; 
; compilation unit finished
;   caught 1 ERROR condition
;   caught 2 STYLE-WARNING conditions
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (defun make-birthday-mailer-function (user friend-name)
            (let ((friend-list (remove-if #'(lambda (friend)
                                             (equal friend-name (friend-name friend)))
                                             (user-friends-list user))))
              #'(lambda ()
                  (send-birthday-email-to-friend-list friend-name friend-list))))

;     (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST REMINDME::FRIEND-NAME
;      REMINDME::FRIEND-LIST)
; 
; caught STYLE-WARNING:
;   undefined function: SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
; 
; compilation unit finished
;   Undefined function:
;     SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (defun send-birthday-email-to-friend-list (friend-name friend-list)
            (print friend-list))
; in: LAMBDA NIL
;     (SB-INT:NAMED-LAMBDA REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
;         (REMINDME::FRIEND-NAME REMINDME::FRIEND-LIST)
;       (BLOCK REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
;         (PRINT REMINDME::FRIEND-LIST)))
; ==>
;   #'(SB-INT:NAMED-LAMBDA REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
;         (REMINDME::FRIEND-NAME REMINDME::FRIEND-LIST)
;       (BLOCK REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
;         (PRINT REMINDME::FRIEND-LIST)))
; 
; caught STYLE-WARNING:
;   The variable FRIEND-NAME is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (defun send-birthday-email-to-friend-list (friend-name friend-list)
            (print friend-list)
            (print friend-name))
STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (let ((func (make-birthday-mailer-function (get-user "shakeela") "Sahana")))
            (clon:schedule-function 'func (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 14 :hour 0))))
; in: LAMBDA NIL
;     (LET ((REMINDME::FUNC
;            (REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;             (REMINDME::GET-USER "shakeela") "Sahana")))
;       (CLON:SCHEDULE-FUNCTION 'REMINDME::FUNC
;                               (CLON:MAKE-SCHEDULER
;                                (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0 :MINUTE
;                                                               14 :HOUR 0))))
; 
; caught STYLE-WARNING:
;   The variable FUNC is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#<SB-EXT:TIMER {1003674451}>
REMINDME> (setf func (make-birthday-mailer-function (get-user "shakeela") "Sahana"))

;     (SETF REMINDME::FUNC
;             (REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;              (REMINDME::GET-USER "shakeela") "Sahana"))
; ==>
;   (SETQ REMINDME::FUNC
;           (REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;            (REMINDME::GET-USER "shakeela") "Sahana"))
; 
; caught WARNING:
;   undefined variable: FUNC
; 
; compilation unit finished
;   Undefined variable:
;     FUNC
;   caught 1 WARNING condition
#<CLOSURE (LAMBDA ()) {1003BABE49}>
REMINDME> (setf my-timer (clon:schedule-function 'func (clon:make-scheduler (clon:make-typed-cron-schedule :second 50 :minute 14 :hour 00))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION 'REMINDME::FUNC
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50
;                                                                     :MINUTE 14
;                                                                     :HOUR 0))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION 'REMINDME::FUNC
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 50
;                                                                   :MINUTE 14
;                                                                   :HOUR 0))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {1003CD6F31}>
REMINDME> (make-birthday-mailer-function (get-user "shakeela") "Sahana")
#<CLOSURE (LAMBDA ()) {10044C7969}>
REMINDME> (setf my-timer (clon:schedule-function 'func (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 16 :hour 00))))

;     (SETF REMINDME::MY-TIMER
;             (CLON:SCHEDULE-FUNCTION 'REMINDME::FUNC
;                                     (CLON:MAKE-SCHEDULER
;                                      (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                     :MINUTE 16
;                                                                     :HOUR 0))))
; ==>
;   (SETQ REMINDME::MY-TIMER
;           (CLON:SCHEDULE-FUNCTION 'REMINDME::FUNC
;                                   (CLON:MAKE-SCHEDULER
;                                    (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0
;                                                                   :MINUTE 16
;                                                                   :HOUR 0))))
; 
; caught WARNING:
;   undefined variable: MY-TIMER
; 
; compilation unit finished
;   Undefined variable:
;     MY-TIMER
;   caught 1 WARNING condition
#<SB-EXT:TIMER {10046EFF21}>
REMINDME> (symbol 'func)

;     (SYMBOL 'REMINDME::FUNC)
; 
; caught WARNING:
;   The function SYMBOL is undefined, and its name is reserved by ANSI CL so that
;   even if it were defined later, the code doing so would not be portable.
; 
; compilation unit finished
;   Undefined function:
;     SYMBOL
;   caught 1 WARNING condition
; Evaluation aborted.
REMINDME> (symbol-function 'func)
; Evaluation aborted.
REMINDME> (setf func (make-birthday-mailer-function (get-user "shakeela") "Sahana"))

;     (SETF REMINDME::FUNC
;             (REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;              (REMINDME::GET-USER "shakeela") "Sahana"))
; ==>
;   (SETQ REMINDME::FUNC
;           (REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;            (REMINDME::GET-USER "shakeela") "Sahana"))
; 
; caught WARNING:
;   undefined variable: FUNC
; 
; compilation unit finished
;   Undefined variable:
;     FUNC
;   caught 1 WARNING condition
#<CLOSURE (LAMBDA ()) {1003AA8E49}>
REMINDME> func
#<CLOSURE (LAMBDA ()) {1003AA8E49}>
REMINDME> (funcall func)

(#S(FRIEND
    :NAME "Shakeela"
    :EMAIL "shakeela.jb@gmail.com"
    :BIRTHDAY 2618073000)
 #S(FRIEND
    :NAME "Manish YM"
    :EMAIL "manishym@gmail.com"
    :BIRTHDAY 2587141800)
 #S(FRIEND :NAME "Noorie" :EMAIL "noorie@noorie.com" :BIRTHDAY 2417020200)) 
"Sahana" 
"Sahana"
REMINDME> (flet ((func (make-birthday-mailer-function (get-user "shakeela") "Sahana")))
            (clon:schedule-function 'func (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 14 :hour 0))))
; in: LAMBDA NIL
;     (FLET ((REMINDME::FUNC
;                (REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION
;                 (REMINDME::GET-USER "shakeela") "Sahana")
;              ))
;       (CLON:SCHEDULE-FUNCTION 'REMINDME::FUNC
;                               (CLON:MAKE-SCHEDULER
;                                (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0 :MINUTE
;                                                               14 :HOUR 0))))
; 
; caught ERROR:
;   Required argument is not a symbol: (GET-USER "shakeela")
; 
; compilation unit finished
;   caught 1 ERROR condition
; Evaluation aborted.
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 14 :hour 0)))
#<SB-EXT:TIMER {100391B111}>
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 24 :hour 0)))

(#S(FRIEND
    :NAME "Shakeela"
    :EMAIL "shakeela.jb@gmail.com"
    :BIRTHDAY 2618073000)
 #S(FRIEND
    :NAME "Manish YM"
    :EMAIL "manishym@gmail.com"
    :BIRTHDAY 2587141800)
 #S(FRIEND :NAME "Noorie" :EMAIL "noorie@noorie.com" :BIRTHDAY 2417020200)) 
"Sahana" #<SB-EXT:TIMER {100398B8D1}>
REMINDME> (defun send-birthday-email-to-friend-list (friend-name friend-list)
            (dolist (friend  friend-list)
              (let ((name (friend-name friend))
                    (email (friend-email friend))
                    (fn friend-name))
                (send-email email (format t "Your friend ~A's birthday is comind up" fn)
                            (format t "Hello ~A ~%
Your friend ~A's birthday is coming up on ~A, don't forget to wish!!
Cheers,
Remind Me" name fn "24-semptember")))))
                    

STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 30 :hour 0)))
#<SB-EXT:TIMER {1003BDE6A1}>
REMINDME> (send-email "manishym@gmail.com" "Hello" "Hello")
; Evaluation aborted.
REMINDME> (send-email "manishym@gmail.com" "Hello" "Hello")
STYLE-WARNING: redefining REMINDME::SEND-EMAIL in DEFUN

; No value
REMINDME> (send-email "manishym@gmail.com" "Hello" "Hello")
NIL
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 40 :hour 0)))
Your friend Sahana's birthday is comind upHello Shakeela 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me#<SB-EXT:TIMER {1003B65631}>
REMINDME> (defun send-birthday-email-to-friend-list (friend-name friend-list)
            (dolist (friend  friend-list)
              (let ((name (friend-name friend))
                    (email (friend-email friend))
                    (fn friend-name))
                (send-email email (format t "Your friend ~A's birthday is comind up" fn)
                            (format t "Hello ~A ~%
Your friend ~A's birthday is coming up on ~A, don't forget to wish!!
Cheers,
Remind Me" name fn "24-semptember")))))
                    

STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (send-birthday-email-to-friend-list "Sahana" (user-friends-list (get-user "Shakeela")))
Your friend Sahana's birthday is comind upHello Sahana 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me

; Evaluation aborted.
; Evaluation aborted.
; No value
REMINDME> 
REMINDME> 
REMINDME> (trace send-email)
(SEND-EMAIL)
REMINDME> (send-birthday-email-to-friend-list "Sahana" (user-friends-list (get-user "Shakeela")))
Your friend Sahana's birthday is comind upHello Sahana 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me  0: (SEND-EMAIL "sahanaym@gmail.com" NIL NIL)

; Evaluation aborted.
; No value
REMINDME> 
REMINDME> (defun send-birthday-email-to-friend-list (friend-name friend-list)
            (dolist (friend  friend-list)
              (let ((name (friend-name friend))
                    (email (friend-email friend))
                    (fn friend-name))
                (send-email email (format nil "Your friend ~A's birthday is comind up" fn)
                            (format nil "Hello ~A ~%
Your friend ~A's birthday is coming up on ~A, don't forget to wish!!
Cheers,
Remind Me" name fn "24-semptember")))))
                    
STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (send-birthday-email-to-friend-list "Sahana" (user-friends-list (get-user "Shakeela")))
  0: (SEND-EMAIL "sahanaym@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Sahana 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "shakeela.jb@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Shakeela 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "manishym@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Manish YM 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "noorie@noorie.com"
                 "Your friend Sahana's birthday is comind up" "Hello Noorie 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
NIL
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 45 :hour 0)))
  0: (SEND-EMAIL "shakeela.jb@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Shakeela 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
#<SB-EXT:TIMER {100338D5D1}>
REMINDME> 
; No value
REMINDME> 
; No value
REMINDME> 
; No value
REMINDME> 
; No value
REMINDME> 
; No value
REMINDME> 
; No value
REMINDME> (send-birthday-email-to-friend-list "Sahana" (user-friends-list (get-user "Shakeela")))
  0: (SEND-EMAIL "sahanaym@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Sahana 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "shakeela.jb@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Shakeela 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "manishym@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Manish YM 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "noorie@noorie.com"
                 "Your friend Sahana's birthday is comind up" "Hello Noorie 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
  0: SEND-EMAIL returned NIL
NIL
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 48 :hour 0)))
#<SB-EXT:TIMER {10038AE0F1}>
REMINDME> 
; No value
REMINDME> 
  0: (SEND-EMAIL "shakeela.jb@gmail.com"
                 "Your friend Sahana's birthday is comind up" "Hello Shakeela 

Your friend Sahana's birthday is coming up on 24-semptember, don't forget to wish!!
Cheers,
Remind Me")
; No value
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 52 :hour 0)) :name "Birthday Wisher1" :thread t)
#<SB-EXT:TIMER "Birthday Wisher1" {10043CCF71}>
REMINDME> 
; No value
REMINDME> 
; No value
REMINDME>  (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 5 :hour 2)) :name "Birthday Wisher1" :thread t)
#<SB-EXT:TIMER "Birthday Wisher1" {10038036C1}>
REMINDME> 
; No value
REMINDME> (defun make-birthday-mailer-function (user friend-name)
  (let ((friend-list (user-friends-list user )))
              #'(lambda ()
                  (send-birthday-email-to-friend-list friend-name (remove-if #'(lambda (friend)
                                             (equal friend-name (friend-name friend)))
                                             (user-friends-list user))))))
; in: LAMBDA NIL
;     (LET ((REMINDME::FRIEND-LIST (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;       #'(LAMBDA ()
;           (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST REMINDME::FRIEND-NAME
;                                                         (REMOVE-IF #'(LAMBDA # #)
;                                                                    (REMINDME::USER-FRIENDS-LIST
;                                                                     REMINDME::USER)))))
; 
; caught STYLE-WARNING:
;   The variable FRIEND-LIST is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (defun make-birthday-mailer-function (user friend-name)
  (let ((friend-list (user-friends-list user )))
              #'(lambda ()
                  (send-birthday-email-to-friend-list friend-name (remove-if #'(lambda (friend)
                                             (equal friend-name (friend-name friend)))
                                             
                                                                             )))))
; in: LAMBDA NIL
;     (REMOVE-IF
;      #'(LAMBDA (REMINDME::FRIEND)
;          (EQUAL REMINDME::FRIEND-NAME (REMINDME::FRIEND-NAME REMINDME::FRIEND))))
; 
; caught WARNING:
;   The function was called with one argument, but wants at least two.

;     (LET ((REMINDME::FRIEND-LIST (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;       #'(LAMBDA ()
;           (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST REMINDME::FRIEND-NAME
;                                                         (REMOVE-IF
;                                                          #'(LAMBDA # #)))))
; 
; caught STYLE-WARNING:
;   The variable FRIEND-LIST is defined but never used.
; 
; compilation unit finished
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (defun make-birthday-mailer-function (user friend-name)
  (let ((friend-list (user-friends-list user )))
              #'(lambda ()
                  (send-birthday-email-to-friend-list friend-name (remove-if #'(lambda (friend)
                                             (equal friend-name (friend-name friend)))
                                             (user-friends-list user))))))
; in: LAMBDA NIL
;     (LET ((REMINDME::FRIEND-LIST (REMINDME::USER-FRIENDS-LIST REMINDME::USER)))
;       #'(LAMBDA ()
;           (REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST REMINDME::FRIEND-NAME
;                                                         (REMOVE-IF #'(LAMBDA # #)
;                                                                    (REMINDME::USER-FRIENDS-LIST
;                                                                     REMINDME::USER)))))
; 
; caught STYLE-WARNING:
;   The variable FRIEND-LIST is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (find "Manish" (user-friends-list (get-user "Shakeela")) :key #'friend-name)
NIL
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name)
NIL
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name)
NIL
REMINDME> (user-friends-list (get-user "Shakeela"))
(#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
 #S(FRIEND
    :NAME "Shakeela"
    :EMAIL "shakeela.jb@gmail.com"
    :BIRTHDAY 2618073000)
 #S(FRIEND :NAME "Manish YM" :EMAIL "manishym@gmail.com" :BIRTHDAY 2587141800)
 #S(FRIEND :NAME "Noorie" :EMAIL "noorie@noorie.com" :BIRTHDAY 2417020200))
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp)
#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
REMINDME> (friend-equal * (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))(defun get-email-body (name f-name bdate)
            (format nil "Hi ~A, ~% Your friend ~A's birthday is coming up on ~A. Do not forget to wish!!~%
Cheers,~%
Remind me~%" name f-name bdate))
T
REMINDME> (remove-if #'(lambda (x) (friend-equal (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp) x)) (user-friends-list (get-user "shakeela")))
(#S(FRIEND
    :NAME "Shakeela"
    :EMAIL "shakeela.jb@gmail.com"
    :BIRTHDAY 2618073000)
 #S(FRIEND :NAME "Manish YM" :EMAIL "manishym@gmail.com" :BIRTHDAY 2587141800)
 #S(FRIEND :NAME "Noorie" :EMAIL "noorie@noorie.com" :BIRTHDAY 2417020200))
REMINDME> (defun make-birthday-mailer-function (user friend)
            (let ((f-list (user-friend-list user)))
              
              #'(lambda () (send-birthday-email-to-friend-list friend (remove-if 
                                                          #'(lambda (x) 
                                                              (friend-equal x friend)) f-list)))))

;     (REMINDME::USER-FRIEND-LIST REMINDME::USER)
; 
; caught STYLE-WARNING:
;   undefined function: USER-FRIEND-LIST
; 
; compilation unit finished
;   Undefined function:
;     USER-FRIEND-LIST
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (defun make-birthday-mailer-function (user friend)
            (let ((f-list (user-friends-list user)))
              
              #'(lambda () (send-birthday-email-to-friend-list friend (remove-if 
                                                          #'(lambda (x) 
                                                              (friend-equal x friend)) f-list)))))
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> friend-list (user-friends-list user )))
              #'(lambda ()
                  (send-birthday-email-to-friend-list friend-name (remove-if #'(lambda (friend)
                                             (equal friend-name (friend-name friend)))
                                             
                                                                
; Evaluation aborted.
REMINDME> (defun make-birthday-mailer-function (user friend)
            (let ((f-list (user-friends-list user)))
              
              #'(lambda () (send-birthday-email-to-friend-list friend (remove-if 
                                                          #'(lambda (x) 
                                                              (friend-equal x friend)) f-list)))))
STYLE-WARNING: redefining REMINDME::MAKE-BIRTHDAY-MAILER-FUNCTION in DEFUN
MAKE-BIRTHDAY-MAILER-FUNCTION
REMINDME> (defun send-birthday-email-to-friend-list (birthday-boy friend-list)
            (dolist (friend  friend-list)
              (let ((name (friend-name friend))
                    (email (friend-email friend))
                    (fn (friend-name birthday-boy))
                    (bdate (encode-birthday-from-time (friend-birthday birthday-boy))))
                (send-email email (get-email-subject fn bdate) (get-email-body fn bdate)))))
; in: LAMBDA NIL
;     (LET ((REMINDME::NAME (REMINDME::FRIEND-NAME REMINDME::FRIEND))
;           (REMINDME::EMAIL (REMINDME::FRIEND-EMAIL REMINDME::FRIEND))
;           (REMINDME::FN (REMINDME::FRIEND-NAME REMINDME::BIRTHDAY-BOY))
;           (REMINDME::BDATE
;            (REMINDME::ENCODE-BIRTHDAY-FROM-TIME
;             (REMINDME::FRIEND-BIRTHDAY REMINDME::BIRTHDAY-BOY))))
;       (REMINDME::SEND-EMAIL REMINDME::EMAIL
;                             (REMINDME::GET-EMAIL-SUBJECT REMINDME::FN
;                              REMINDME::BDATE)
;                             (REMINDME::GET-EMAIL-BODY REMINDME::FN
;                              REMINDME::BDATE)))
; 
; caught STYLE-WARNING:
;   The variable NAME is defined but never used.

;     (REMINDME::GET-EMAIL-BODY REMINDME::FN REMINDME::BDATE)
; 
; caught STYLE-WARNING:
;   undefined function: GET-EMAIL-BODY

;     (REMINDME::GET-EMAIL-SUBJECT REMINDME::FN REMINDME::BDATE)
; 
; caught STYLE-WARNING:
;   undefined function: GET-EMAIL-SUBJECT
; 
; compilation unit finished
;   Undefined functions:
;     GET-EMAIL-BODY GET-EMAIL-SUBJECT
;   caught 3 STYLE-WARNING conditions
STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (defun send-birthday-email-to-friend-list (birthday-boy friend-list)
            (dolist (friend  friend-list)
              (let ((name (friend-name friend))
                    (email (friend-email friend))
                    (fn (friend-name birthday-boy))
                    (bdate (encode-birthday-from-time (friend-birthday birthday-boy))))
                (send-email email (get-email-subject fn bdate) (get-email-body name fn bdate)))))

;     (REMINDME::GET-EMAIL-BODY REMINDME::NAME REMINDME::FN REMINDME::BDATE)
; 
; caught STYLE-WARNING:
;   undefined function: GET-EMAIL-BODY

;     (REMINDME::GET-EMAIL-SUBJECT REMINDME::FN REMINDME::BDATE)
; 
; caught STYLE-WARNING:
;   undefined function: GET-EMAIL-SUBJECT
; 
; compilation unit finished
;   Undefined functions:
;     GET-EMAIL-BODY GET-EMAIL-SUBJECT
;   caught 2 STYLE-WARNING conditions
STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (defun get-email-subject (f-name bdate)
            (format nil "Your friend ~A's birthday coming up on ~A" f-name bdate))
GET-EMAIL-SUBJECT
REMINDME> (defun get-email-body (name f-name bdate)
            (format nil "Hi ~A, ~% Your friend ~A's birthday is coming up on ~A. Do not forget to wish!!~%
Cheers,~%
Remind me~%" name f-name bdate))
; in: LAMBDA NIL
;     (SB-INT:NAMED-LAMBDA REMINDME::GET-EMAIL-BODY
;         (REMINDME::NAME REMINDME::F-NAME REMINDME::BDATE)
;       (BLOCK REMINDME::GET-EMAIL-BODY
;         (FORMAT NIL
;                 "Hi ~A, ~% Your friend ~A's birthday is coming up on ~A. Do not forget to wish!!~%
;   Cheers,~%
;   Remind me~%"
;                 REMINDME::NAME REMINDME::F-NAME REMINDME::BDATE)))
; ==>
;   #'(SB-INT:NAMED-LAMBDA REMINDME::GET-EMAIL-BODY
;         (REMINDME::NAME REMINDME::F-NAME REMINDME::BDATE)
;       (BLOCK REMINDME::GET-EMAIL-BODY
;         (FORMAT NIL
;                 "Hi ~A, ~% Your friend ~A's birthday is coming up on ~A. Do not forget to wish!!~%
; Cheers,~%
; Remind me~%"
;                 REMINDME::NAME REMINDME::F-NAME REMINDME::BDATE)))
; 
; caught STYLE-WARNING:
;   (The function was previously called with two arguments, but wants at least three.)
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
GET-EMAIL-BODY
REMINDME> (defun send-birthday-email-to-friend-list (birthday-boy friend-list)
            (dolist (friend  friend-list)
              (let ((name (friend-name friend))
                    (email (friend-email friend))
                    (fn (friend-name birthday-boy))
                    (bdate (encode-birthday-from-time (friend-birthday birthday-boy))))
                (send-email email (get-email-subject fn bdate) (get-email-body name fn bdate)))))
STYLE-WARNING:
   redefining REMINDME::SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST in DEFUN
SEND-BIRTHDAY-EMAIL-TO-FRIEND-LIST
REMINDME> (defun get-email-body (name f-name bdate)
            (format nil "Hi ~A, ~% Your friend ~A's birthday is coming up on ~A. Do not forget to wish!!~%
Cheers,~%
Remind me~%" name f-name bdate))
STYLE-WARNING: redefining REMINDME::GET-EMAIL-BODY in DEFUN
GET-EMAIL-BODY
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp)
; Evaluation aborted.
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp)
#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
REMINDME> (send-birthday-email-to-friend-list * (user-friends-list (get-user "shakeela")))
  0: (SEND-EMAIL "sahanaym@gmail.com"
                 "Your friend Sahana's birthday coming up on 9.24.1977"
                 "Hi Sahana, 
 Your friend Sahana's birthday is coming up on 9.24.1977. Do not forget to wish!!

Cheers,

Remind me
")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "shakeela.jb@gmail.com"
                 "Your friend Sahana's birthday coming up on 9.24.1977"
                 "Hi Shakeela, 
 Your friend Sahana's birthday is coming up on 9.24.1977. Do not forget to wish!!

Cheers,

Remind me
")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "manishym@gmail.com"
                 "Your friend Sahana's birthday coming up on 9.24.1977"
                 "Hi Manish YM, 
 Your friend Sahana's birthday is coming up on 9.24.1977. Do not forget to wish!!

Cheers,

Remind me
")
  0: SEND-EMAIL returned NIL
  0: (SEND-EMAIL "noorie@noorie.com"
                 "Your friend Sahana's birthday coming up on 9.24.1977"
                 "Hi Noorie, 
 Your friend Sahana's birthday is coming up on 9.24.1977. Do not forget to wish!!

Cheers,

Remind me
")
  0: SEND-EMAIL returned NIL
NIL
REMINDME> 
; No value
REMINDME> (clon:schedule-function (make-birthday-mailer-function (get-user "shakeela") "Sahana") (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 5 :hour 2)) :name "Birthday Wisher1" :thread t)
#<SB-EXT:TIMER "Birthday Wisher1" {10044C7351}>
REMINDME> (defun schedule-birthday-mailer (user friend)
            (clon:schedule-function 
             (make-birthday-mailer-function user friend) 
             (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 minute 0 :hour 0
                                                                 :day-of-month (get-day-from-bday friend)
                                                                 :month (get-month-from-bday friend))) :name (friend-name friend) :thread t))
                                                                                                                                    
                                            

;     (REMINDME::GET-DAY-FROM-BDAY REMINDME::FRIEND)
; 
; caught STYLE-WARNING:
;   undefined function: GET-DAY-FROM-BDAY

;     (REMINDME::GET-MONTH-FROM-BDAY REMINDME::FRIEND)
; 
; caught STYLE-WARNING:
;   undefined function: GET-MONTH-FROM-BDAY

;     (CLON:MAKE-TYPED-CRON-SCHEDULE :SECOND 0 REMINDME::MINUTE 0 :HOUR 0
;                                    :DAY-OF-MONTH
;                                    (REMINDME::GET-DAY-FROM-BDAY REMINDME::FRIEND)
;                                    :MONTH
;                                    (REMINDME::GET-MONTH-FROM-BDAY
;                                     REMINDME::FRIEND))
; 
; caught WARNING:
;   undefined variable: MINUTE
; 
; compilation unit finished
;   Undefined functions:
;     GET-DAY-FROM-BDAY GET-MONTH-FROM-BDAY
;   Undefined variable:
;     MINUTE
;   caught 1 WARNING condition
;   caught 2 STYLE-WARNING conditions
SCHEDULE-BIRTHDAY-MAILER
REMINDME> (defun schedule-birthday-mailer (user friend)
            (clon:schedule-function 
             (make-birthday-mailer-function user friend) 
             (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 0 :hour 0
                                                                 :day-of-month (get-day-from-bday friend)
                                                                 :month (get-month-from-bday friend))) :name (friend-name friend) :thread t))
                                                                                                                                    
                                            

;     (REMINDME::GET-DAY-FROM-BDAY REMINDME::FRIEND)
; 
; caught STYLE-WARNING:
;   undefined function: GET-DAY-FROM-BDAY

;     (REMINDME::GET-MONTH-FROM-BDAY REMINDME::FRIEND)
; 
; caught STYLE-WARNING:
;   undefined function: GET-MONTH-FROM-BDAY
; 
; compilation unit finished
;   Undefined functions:
;     GET-DAY-FROM-BDAY GET-MONTH-FROM-BDAY
;   caught 2 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::SCHEDULE-BIRTHDAY-MAILER in DEFUN
SCHEDULE-BIRTHDAY-MAILER
REMINDME> (get-universal-time)
3525921003
REMINDME> (decode-universal-time (get-universal-time))
17
0
12
25
9
2011
6
NIL
-11/2
REMINDME> (defun get-day-from-bday (friend)
            (multiple-value-bind (s m h day) (decode-universal-time (friend-birthday friend))))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY)
;         (DECODE-UNIVERSAL-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::FRIEND)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0)))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable DAY is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
GET-DAY-FROM-BDAY
REMINDME> (defun get-month-from-bday (friend)
            (multiple-value-bind (s m h day mon (decode-universal-time (friend-birthday friend)))))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;          (DECODE-UNIVERSAL-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::FRIEND))))
; 
; caught ERROR:
;   during macroexpansion of (MULTIPLE-VALUE-BIND (S M H ...)). Use
;   *BREAK-ON-SIGNALS* to intercept:
;   
;    error while parsing arguments to DEFMACRO MULTIPLE-VALUE-BIND:
;      invalid number of elements in
;        ((S M H DAY MON (DECODE-UNIVERSAL-TIME #)))
;      to satisfy lambda list
;        (SB-IMPL::VARS SB-IMPL::VALUE-FORM &BODY SB-IMPL::BODY):
;      at least 2 expected, but 1 found

;     (SB-INT:NAMED-LAMBDA REMINDME::GET-MONTH-FROM-BDAY
;         (REMINDME::FRIEND)
;       (BLOCK REMINDME::GET-MONTH-FROM-BDAY
;         (MULTIPLE-VALUE-BIND
;             (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;              (DECODE-UNIVERSAL-TIME #)))))
; ==>
;   #'(SB-INT:NAMED-LAMBDA REMINDME::GET-MONTH-FROM-BDAY
;         (REMINDME::FRIEND)
;       (BLOCK REMINDME::GET-MONTH-FROM-BDAY
;         (MULTIPLE-VALUE-BIND
;             (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON
;              (DECODE-UNIVERSAL-TIME #)))))
; 
; caught STYLE-WARNING:
;   The variable FRIEND is defined but never used.
; 
; compilation unit finished
;   caught 1 ERROR condition
;   caught 1 STYLE-WARNING condition
GET-MONTH-FROM-BDAY
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
; Evaluation aborted.
REMINDME> (defun get-month-from-bday (friend)
            (multiple-value-bind (s m h day mon) (decode-universal-time (friend-birthday friend))))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON)
;         (DECODE-UNIVERSAL-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::FRIEND)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0)))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable DAY is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MON is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
NIL
REMINDME> (trace friend-birthday)
(FRIEND-BIRTHDAY)
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
NIL
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
NIL
REMINDME> (defun get-month-from-bday (friend)
            (multiple-value-bind (s m h day mon) (decode-universal-time (friend-birthday friend))))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON)
;         (DECODE-UNIVERSAL-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::FRIEND)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0)))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable DAY is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MON is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp)
#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
NIL
REMINDME> (trace get-month-from-bday)
(GET-MONTH-FROM-BDAY)
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Sahana"
         :EMAIL "sahanaym@gmail.com"
         :BIRTHDAY 2452876200))
  0: GET-MONTH-FROM-BDAY returned NIL
NIL
REMINDME> (defun get-month-from-bday (friend)
            (multiple-value-bind (s m h day mon) (decode-universal-time (friend-birthday friend))))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON)
;         (DECODE-UNIVERSAL-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::FRIEND)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0)))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable DAY is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MON is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (trace decode-universal-time)
(DECODE-UNIVERSAL-TIME)
REMINDME> (defun get-month-from-bday (friend)
            (multiple-value-bind (s m h day mon) (decode-universal-time (friend-birthday friend))))
; in: LAMBDA NIL
;     (MULTIPLE-VALUE-BIND
;         (REMINDME::S REMINDME::M REMINDME::H REMINDME::DAY REMINDME::MON)
;         (DECODE-UNIVERSAL-TIME (REMINDME::FRIEND-BIRTHDAY REMINDME::FRIEND)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA
;         (&OPTIONAL (REMINDME::S) (REMINDME::M) (REMINDME::H) (REMINDME::DAY)
;          (REMINDME::MON)
;          &REST #:G0)
;       (DECLARE (IGNORE #:G0)))
; 
; caught STYLE-WARNING:
;   The variable S is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable M is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable H is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable DAY is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable MON is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Sahana"
         :EMAIL "sahanaym@gmail.com"
         :BIRTHDAY 2452876200))
  0: GET-MONTH-FROM-BDAY returned NIL
NIL
REMINDME> (get-day-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
NIL
REMINDME> (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp)
#S(FRIEND :NAME "Sahana" :EMAIL "sahanaym@gmail.com" :BIRTHDAY 2452876200)
REMINDME> (get-day-from-bday *)
NIL
REMINDME> (defun get-month-from-bday (friend)
            (decode-universal-time (friend-birthday friend)))
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Sahana"
         :EMAIL "sahanaym@gmail.com"
         :BIRTHDAY 2452876200))
    1: (DECODE-UNIVERSAL-TIME 2452876200)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 1977 5 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned 0 0 0 24 9 1977 5 NIL -11/2
0
0
0
24
9
1977
5
NIL
-11/2
REMINDME> (defun get-month-from-bday (friend)
            (multiple-value-list (decode-universal-time (friend-birthday friend))))
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Sahana"
         :EMAIL "sahanaym@gmail.com"
         :BIRTHDAY 2452876200))
    1: (DECODE-UNIVERSAL-TIME 2452876200)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 1977 5 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned (0 0 0 24 9 1977 5 NIL -11/2)
(0 0 0 24 9 1977 5 NIL -11/2)
REMINDME> (defun get-month-from-bday (friend)
            (fifth (multiple-value-list (decode-universal-time (friend-birthday friend)))))
STYLE-WARNING: redefining REMINDME::GET-MONTH-FROM-BDAY in DEFUN
GET-MONTH-FROM-BDAY
REMINDME> (get-month-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Sahana"
         :EMAIL "sahanaym@gmail.com"
         :BIRTHDAY 2452876200))
    1: (DECODE-UNIVERSAL-TIME 2452876200)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 1977 5 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned 9
9
REMINDME> (defun get-day-from-bday (friend)
            (fourth (multiple-value-list (decode-universal-time (friend-birthday friend)))))
STYLE-WARNING: redefining REMINDME::GET-DAY-FROM-BDAY in DEFUN
GET-DAY-FROM-BDAY
REMINDME> (get-day-from-bday (find "Sahana" (user-friends-list (get-user "Shakeela")) :key #'friend-name :test #'equalp))
  0: (DECODE-UNIVERSAL-TIME 2452876200)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 1977 5 NIL -11/2
24
REMINDME> (defun schedule-birthday-mailer (user friend)
            (clon:schedule-function 
             (make-birthday-mailer-function user friend) 
             (clon:make-scheduler (clon:make-typed-cron-schedule :second 0 :minute 0 :hour 0
                                                                 :day-of-month (get-day-from-bday friend)
                                                                 :month (get-month-from-bday friend))) :name (friend-name friend) :thread t))
STYLE-WARNING: redefining REMINDME::SCHEDULE-BIRTHDAY-MAILER in DEFUN
SCHEDULE-BIRTHDAY-MAILER
REMINDME> (defun schedule-birthdays (user)
            (dolist (friend (user-friends-list user))
              (schedule-birthday-mailer user friend)))
            
SCHEDULE-BIRTHDAYS
REMINDME> (schedule-birthdays (get-user "shakeela"))
  0: (DECODE-UNIVERSAL-TIME 2452876200)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 1977 5 NIL -11/2
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Sahana"
         :EMAIL "sahanaym@gmail.com"
         :BIRTHDAY 2452876200))
    1: (DECODE-UNIVERSAL-TIME 2452876200)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 1977 5 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned 9
  0: (DECODE-UNIVERSAL-TIME 3525922091)
  0: DECODE-UNIVERSAL-TIME returned 11 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3526396200)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 10 2011 5 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3534345000)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 1 2012 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3534345000)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 1 2012 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3555426600)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 9 2012 5 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3557413800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 2012 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3557413800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 2012 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3557413800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 24 9 2012 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 2618073000)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 19 12 1982 6 NIL -11/2
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Shakeela"
         :EMAIL "shakeela.jb@gmail.com"
         :BIRTHDAY 2618073000))
    1: (DECODE-UNIVERSAL-TIME 2618073000)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 19 12 1982 6 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned 12
  0: (DECODE-UNIVERSAL-TIME 3525922091)
  0: DECODE-UNIVERSAL-TIME returned 11 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3531666600)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 12 2011 3 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3533221800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 19 12 2011 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3533221800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 19 12 2011 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3533221800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 19 12 2011 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 2587141800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 26 12 1981 5 NIL -11/2
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND
         :NAME "Manish YM"
         :EMAIL "manishym@gmail.com"
         :BIRTHDAY 2587141800))
    1: (DECODE-UNIVERSAL-TIME 2587141800)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 26 12 1981 5 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned 12
  0: (DECODE-UNIVERSAL-TIME 3525922091)
  0: DECODE-UNIVERSAL-TIME returned 11 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3531666600)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 12 2011 3 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3533826600)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 26 12 2011 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3533826600)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 26 12 2011 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3533826600)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 26 12 2011 0 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 2417020200)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 5 8 1976 3 NIL -11/2
  0: (GET-MONTH-FROM-BDAY
      #S(FRIEND :NAME "Noorie" :EMAIL "noorie@noorie.com" :BIRTHDAY 2417020200))
    1: (DECODE-UNIVERSAL-TIME 2417020200)
    1: DECODE-UNIVERSAL-TIME returned 0 0 0 5 8 1976 3 NIL -11/2
  0: GET-MONTH-FROM-BDAY returned 8
  0: (DECODE-UNIVERSAL-TIME 3525922091)
  0: DECODE-UNIVERSAL-TIME returned 11 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3525922092)
  0: DECODE-UNIVERSAL-TIME returned 12 18 12 25 9 2011 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3534345000)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 1 2012 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3534345000)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 1 2012 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3552748200)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 1 8 2012 2 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3553093800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 5 8 2012 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3553093800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 5 8 2012 6 NIL -11/2
  0: (DECODE-UNIVERSAL-TIME 3553093800)
  0: DECODE-UNIVERSAL-TIME returned 0 0 0 5 8 2012 6 NIL -11/2
NIL
REMINDME> (untrace)
T
REMINDME> (defun create-user-from-form (name password friend-file)
  "This function is to create user and add it to database from html form.
Arguments are user name, password and path to friend file. This path is returned from
handle-file function."
  (let ((user (make-user :name name :password password)))
    (make-user-friends-list-from-file user friend-file)
    (add-user-obj user)))
STYLE-WARNING: redefining REMINDME::CREATE-USER-FROM-FORM in DEFUN
CREATE-USER-FROM-FORM
REMINDME> (defun create-user-from-form (name password friend-file)
  "This function is to create user and add it to database from html form.
Arguments are user name, password and path to friend file. This path is returned from
handle-file function."
  (let ((user (make-user :name name :password password)))
    (make-user-friends-list-from-file user friend-file)
    (add-user-obj user)
    (schedule-birthdays user)))
STYLE-WARNING: redefining REMINDME::CREATE-USER-FROM-FORM in DEFUN
CREATE-USER-FROM-FORM
REMINDME> (start *site*)
; Evaluation aborted.
REMINDME> (sb-ext:list-all-timers)
(#<SB-EXT:TIMER {1002D42C81}> #<SB-EXT:TIMER {1002D42CD1}>
 #<SB-EXT:TIMER {1002D42D21}> #<SB-EXT:TIMER {1002D42D71}>
 #<SB-EXT:TIMER {1002D42DC1}> #<SB-EXT:TIMER {1002D42E11}>
 #<SB-EXT:TIMER {1002D42E61}> #<SB-EXT:TIMER {1002D42EB1}>
 #<SB-EXT:TIMER {1002D42F01}> #<SB-EXT:TIMER {1002D42F51}>
 #<SB-EXT:TIMER {1002D42FA1}> #<SB-EXT:TIMER {1002D43001}>
 #<SB-EXT:TIMER {1002D43051}> #<SB-EXT:TIMER {1002D430A1}>
 #<SB-EXT:TIMER {1002D430F1}> #<SB-EXT:TIMER {1002D43141}>
 #<SB-EXT:TIMER {1002D43191}> #<SB-EXT:TIMER {1002D431E1}>
 #<SB-EXT:TIMER {1002D43231}> #<SB-EXT:TIMER {1002D43281}>
 #<SB-EXT:TIMER "Birthday Wisher1" {1002D28001}>
 #<SB-EXT:TIMER "Birthday Wisher1" {1002D6B941}>
 #<SB-EXT:TIMER "Birthday Wisher1" {1002D25001}>
 #<SB-EXT:TIMER "Sahana" {10049CCBD1}> #<SB-EXT:TIMER "Shakeela" {10049CCC21}>
 #<SB-EXT:TIMER "Manish YM" {10049CCC71}> #<SB-EXT:TIMER "Noorie" {1003889661}>)
REMINDME> (mapc #'sb-ext:unschedule-timer (sb-ext:list-all-timers))
(#<SB-EXT:TIMER {1002D42C81}> #<SB-EXT:TIMER {1002D42CD1}>
 #<SB-EXT:TIMER {1002D42D21}> #<SB-EXT:TIMER {1002D42D71}>
 #<SB-EXT:TIMER {1002D42DC1}> #<SB-EXT:TIMER {1002D42E11}>
 #<SB-EXT:TIMER {1002D42E61}> #<SB-EXT:TIMER {1002D42EB1}>
 #<SB-EXT:TIMER {1002D42F01}> #<SB-EXT:TIMER {1002D42F51}>
 #<SB-EXT:TIMER {1002D42FA1}> #<SB-EXT:TIMER {1002D43001}>
 #<SB-EXT:TIMER {1002D43051}> #<SB-EXT:TIMER {1002D430A1}>
 #<SB-EXT:TIMER {1002D430F1}> #<SB-EXT:TIMER {1002D43141}>
 #<SB-EXT:TIMER {1002D43191}> #<SB-EXT:TIMER {1002D431E1}>
 #<SB-EXT:TIMER {1002D43231}> #<SB-EXT:TIMER {1002D43281}>
 #<SB-EXT:TIMER "Birthday Wisher1" {1002D28001}>
 #<SB-EXT:TIMER "Birthday Wisher1" {1002D6B941}>
 #<SB-EXT:TIMER "Birthday Wisher1" {1002D25001}>
 #<SB-EXT:TIMER "Sahana" {10049CCBD1}> #<SB-EXT:TIMER "Shakeela" {10049CCC21}>
 #<SB-EXT:TIMER "Manish YM" {10049CCC71}> #<SB-EXT:TIMER "Noorie" {1003889661}>)
REMINDME> (sb-ext:list-all-timers)
NIL
REMINDME> (sb-ext:list-all-timers)
(#<SB-EXT:TIMER "Shakeela" {1004B86F81}>
 #<SB-EXT:TIMER "Manish YM" {1004B87001}> #<SB-EXT:TIMER "Noorie" {1004B87051}>
 #<SB-EXT:TIMER "Sahana" {1004B870A1}>)
REMINDME> (mapc #'sb-ext:unschedule-timer (sb-ext:list-all-timers))
(#<SB-EXT:TIMER "Shakeela" {1004B86F81}>
 #<SB-EXT:TIMER "Manish YM" {1004B87001}> #<SB-EXT:TIMER "Noorie" {1004B87051}>
 #<SB-EXT:TIMER "Sahana" {1004B870A1}>)
REMINDME> (session-value 'current-user)
; Evaluation aborted.
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name" (:input :type :string :name "name" :label "Name"))
           (:p "Password" (:input :type :password :name "password") (:br))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :action "/login-user" :method :post
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password"))
           (:input :type :submit :value "Login"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (login-user :uri "/login-user") ()
            (let ((name (post-parameter "name"))
                  (password (post-parameter "password")))
              (let ((user (get-user name)))
                (if user
                    (let ((real-password (user-password user)))
                      (if (string= password real-password)
                          (setf (session-value 'current-user) user)
                          (redirect "/create-user")))
                    (redirect "/create-user")))))
              
LOGIN-USER
REMINDME> (define-easy-handler (login-user :uri "/login-user") ()
            (let ((name (post-parameter "name"))
                  (password (post-parameter "password")))
              (let ((user (get-user name)))
                (if user
                    (let ((real-password (user-password user)))
                      (if (string= password real-password)
                          (progn (setf (session-value 'current-user) user)
                                 (redirect "/new-user-home"))
                          (redirect "/create-user")))
                    (redirect "/create-user")))))
              
STYLE-WARNING: redefining REMINDME::LOGIN-USER in DEFUN
LOGIN-USER
REMINDME> (define-easy-handler (new-user :uri "/new-user") ()
  "To create users from the form submitted by user"
  (let ((file (post-parameter "file1"))
        (name (post-parameter "name"))
        (password (post-parameter "password")))
    (log-message :info "POST ~A" (post-parameter "file1"))
    (log-message :info "POST:name ~A" name) 
    (log-message :info "FILE ~A" file)
    (when file
      (let ((path (handle-file file)))
        (log-message :info "Saved file to ~A" path)
        (setf (session-value 'current-user)  (create-user-from-form name password path))
        (redirect "/new-user-home" )))))
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
NEW-USER
REMINDME> (defun create-user-from-form (name password friend-file)
  "This function is to create user and add it to database from html form.
Arguments are user name, password and path to friend file. This path is returned from
handle-file function."
  (let ((user (make-user :name name :password password)))
    (make-user-friends-list-from-file user friend-file)
    (add-user-obj user)
    (schedule-birthdays user)
    user))
STYLE-WARNING: redefining REMINDME::CREATE-USER-FROM-FORM in DEFUN
CREATE-USER-FROM-FORM
REMINDME> (sb-ext:list-all-timers)
(#<SB-EXT:TIMER "Shakeela" {1003CF3251}>
 #<SB-EXT:TIMER "Shakeela" {1002DA0A01}>
 #<SB-EXT:TIMER "Manish YM" {1003CF3F21}> #<SB-EXT:TIMER "Sahana" {1003CF5B41}>
 #<SB-EXT:TIMER "Manish YM" {1002DA0A51}> #<SB-EXT:TIMER "Noorie" {1002DA0AA1}>
 #<SB-EXT:TIMER "Noorie" {1003CF4C41}> #<SB-EXT:TIMER "Sahana" {1002DA0AF1}>)
REMINDME> (mapc #'sb-ext:unschedule-timer (sb-ext:list-all-timers))
(#<SB-EXT:TIMER "Shakeela" {1003CF3251}>
 #<SB-EXT:TIMER "Shakeela" {1002DA0A01}>
 #<SB-EXT:TIMER "Manish YM" {1003CF3F21}> #<SB-EXT:TIMER "Sahana" {1003CF5B41}>
 #<SB-EXT:TIMER "Manish YM" {1002DA0A51}> #<SB-EXT:TIMER "Noorie" {1002DA0AA1}>
 #<SB-EXT:TIMER "Noorie" {1003CF4C41}> #<SB-EXT:TIMER "Sahana" {1002DA0AF1}>)
REMINDME> (sb-ext:list-all-timers)
NIL
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :action "/login-user" :method :post
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password"))
           (:input :type :submit :value "Login"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :class "register" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "login" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password"))
           (:input :type :submit :value "Login"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (str ' <!--[if lt IE 8]>
    <link rel="stylesheet" href="css/blueprint/ie.css" type="text/css" media="screen, projection">
  <![endif]--> ')
                    
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :id "header"
                   (:img :src "/logo.jpg"
                         :alt "Some image"
                         :class "logo")
                   (:span :class "strapline"
                          "Your friend's birthday in your pocket"))
             ,@body))))
; Evaluation aborted.
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (str ' <!--[if lt IE 8]>
    <link rel="stylesheet" href="css/blueprint/ie.css" type="text/css" media="screen, projection">
  <![endif]--> ')
                    
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :id "header"
                   (:img :src "/logo.jpg"
                         :alt "Some image"
                         :class "logo")
                   (:span :class "strapline"
                          "Your friend's birthday in your pocket"))
             ,@body)))) 
; Evaluation aborted.
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (str ' <!--[if lt IE 8]>
    <link rel="stylesheet" href="css/blueprint/ie.css" type="text/css" media="screen, projection">
  <![endif]--> ')
                    
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :id "header"
                   (:img :src "/logo.jpg"
                         :alt "Some image"
                         :class "logo")
                   (:span :class "strapline"
                          "Your friend's birthday in your pocket"))
             ,@body)))
  )
; Evaluation aborted.
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :id "header"
                   (:img :src "/logo.jpg"
                         :alt "Some image"
                         :class "logo")
                   (:span :class "strapline"
                          "Your friend's birthday in your pocket"))
             ,@body))))

; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 07:28:38 PM):

; file: /home/manish/projects/lisp/web/learn/remind-me.lisp
; in: DEFINE-EASY-HANDLER (NEW-USER-HOME :URI "/new-user-home")
;     (HUNCHENTOOT:DEFINE-EASY-HANDLER (REMINDME::NEW-USER-HOME :URI
;                                                               "/new-user-home")
;         NIL
;       (LET ((REMINDME::USER (HUNCHENTOOT:SESSION-VALUE 'REMINDME::CURRENT-USER)))
;         (IF REMINDME::USER
;             (REMINDME::STANDARD-PAGE (:TITLE #)
;               (:H3 #)
;               (:UL #))
;             (HUNCHENTOOT:REDIRECT "/create-user"))))
; --> PROGN DEFUN PROGN 
; ==>
;   (EVAL-WHEN (:COMPILE-TOPLEVEL)
;     (SB-C:%COMPILER-DEFUN 'REMINDME::NEW-USER-HOME 'NIL T))
; 
; caught WARNING:
;   Duplicate definition for NEW-USER-HOME found in one file.
;   See also:
;     The ANSI Standard, Section 3.2.2.3
; 
; compilation unit finished
;   caught 1 WARNING condition

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.203
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 07:29:56 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.188
STYLE-WARNING: redefining REMINDME::LOGIN-USER in DEFUN
STYLE-WARNING: redefining REMINDME::NEW-USER in DEFUN
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
STANDARD-PAGE
REMINDME> (create-static-file-dispatcher-and-handler "/public/css/blueprint/screen.css" "/home/manish/projects/lisp/public/css/blueprint/screen.css" "text/css")
#<CLOSURE (LAMBDA (REQUEST)) {10036AFF09}>
REMINDME> (create-static-file-dispatcher-and-handler "/public/css/blueprint/print.css" "/home/manish/projects/lisp/public/css/blueprint/print.css" "text/css")
#<CLOSURE (LAMBDA (REQUEST)) {1003788519}>
REMINDME> (create-static-file-dispatcher-and-handler "/public/css/blueprint/ie.css" "/home/manish/projects/lisp/public/css/blueprint/ie.css" "text/css")
#<CLOSURE (LAMBDA (REQUEST)) {10037CB849}>
REMINDME> (defun create-css-dispatcher (file-name)
            (labels ((uri
                         (format nil "/public/css/blueprint/~A" file-name))
                     (path 
                         (format nil "/home/manish/projects/lisp/public/css/blueprint/~A" file-name)))
                
              (push (create-static-file-dispatcher-and-handler (uri) (path) "text/css")
                    *dispatch-table*)))
; in: LAMBDA NIL
;     (LABELS ((REMINDME::URI
;                  (FORMAT () "/public/css/blueprint/~A" REMINDME::FILE-NAME)
;                )
;              (REMINDME::PATH
;                  (FORMAT () "/home/manish/projects/lisp/public/css/blueprint/~A"
;                   REMINDME::FILE-NAME)
;                ))
;       (PUSH
;        (HUNCHENTOOT:CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER (REMINDME::URI)
;                                                               (REMINDME::PATH)
;                                                               "text/css")
;        HUNCHENTOOT:*DISPATCH-TABLE*))
; 
; caught ERROR:
;   Required argument is not a symbol: "/public/css/blueprint/~A"

;     (SB-INT:NAMED-LAMBDA REMINDME::CREATE-CSS-DISPATCHER
;         (REMINDME::FILE-NAME)
;       (BLOCK REMINDME::CREATE-CSS-DISPATCHER
;         (LABELS ((REMINDME::URI #
;                    )
;                  (REMINDME::PATH #
;                    ))
;           (PUSH
;            (HUNCHENTOOT:CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER # # "text/css")
;            HUNCHENTOOT:*DISPATCH-TABLE*))))
; ==>
;   #'(SB-INT:NAMED-LAMBDA REMINDME::CREATE-CSS-DISPATCHER
;         (REMINDME::FILE-NAME)
;       (BLOCK REMINDME::CREATE-CSS-DISPATCHER
;         (LABELS ((REMINDME::URI #
;                    )
;                  (REMINDME::PATH #
;                    ))
;           (PUSH
;            (HUNCHENTOOT:CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER # #
;                                                                   "text/css")
;            HUNCHENTOOT:*DISPATCH-TABLE*))))
; 
; caught STYLE-WARNING:
;   The variable FILE-NAME is defined but never used.
; 
; compilation unit finished
;   caught 1 ERROR condition
;   caught 1 STYLE-WARNING condition
CREATE-CSS-DISPATCHER
REMINDME> (defun create-css-dispatcher (file-name)
            (labels ((uri
                         (format nil "/public/css/blueprint/~A" file-name))
                     (path 
                         (format nil "/home/manish/projects/lisp/public/css/blueprint/~A" file-name)))
                
              (push (create-static-file-dispatcher-and-handler (uri) (path) "text/css")
                    *dispatch-table*)))
; in: LAMBDA NIL
;     (LABELS ((REMINDME::URI
;                  (FORMAT () "/public/css/blueprint/~A" REMINDME::FILE-NAME)
;                )
;              (REMINDME::PATH
;                  (FORMAT () "/home/manish/projects/lisp/public/css/blueprint/~A"
;                   REMINDME::FILE-NAME)
;                ))
;       (PUSH
;        (HUNCHENTOOT:CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER (REMINDME::URI)
;                                                               (REMINDME::PATH)
;                                                               "text/css")
;        HUNCHENTOOT:*DISPATCH-TABLE*))
; 
; caught ERROR:
;   Required argument is not a symbol: "/public/css/blueprint/~A"

;     (SB-INT:NAMED-LAMBDA REMINDME::CREATE-CSS-DISPATCHER
;         (REMINDME::FILE-NAME)
;       (BLOCK REMINDME::CREATE-CSS-DISPATCHER
;         (LABELS ((REMINDME::URI #
;                    )
;                  (REMINDME::PATH #
;                    ))
;           (PUSH
;            (HUNCHENTOOT:CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER # # "text/css")
;            HUNCHENTOOT:*DISPATCH-TABLE*))))
; ==>
;   #'(SB-INT:NAMED-LAMBDA REMINDME::CREATE-CSS-DISPATCHER
;         (REMINDME::FILE-NAME)
;       (BLOCK REMINDME::CREATE-CSS-DISPATCHER
;         (LABELS ((REMINDME::URI #
;                    )
;                  (REMINDME::PATH #
;                    ))
;           (PUSH
;            (HUNCHENTOOT:CREATE-STATIC-FILE-DISPATCHER-AND-HANDLER # #
;                                                                   "text/css")
;            HUNCHENTOOT:*DISPATCH-TABLE*))))
; 
; caught STYLE-WARNING:
;   The variable FILE-NAME is defined but never used.
; 
; compilation unit finished
;   caught 1 ERROR condition
;   caught 1 STYLE-WARNING condition
STYLE-WARNING: redefining REMINDME::CREATE-CSS-DISPATCHER in DEFUN
CREATE-CSS-DISPATCHER
REMINDME> (create-css-dispatcher "print.css")
; Evaluation aborted.
REMINDME> (defun create-css-dispatcher (file-name)
            (labels ((uri ()
                         (format nil "/public/css/blueprint/~A" file-name))
                     (path ()
                         (format nil "/home/manish/projects/lisp/public/css/blueprint/~A" file-name)))
                
              (push (create-static-file-dispatcher-and-handler (uri) (path) "text/css")
                    *dispatch-table*)))
STYLE-WARNING: redefining REMINDME::CREATE-CSS-DISPATCHER in DEFUN
CREATE-CSS-DISPATCHER
REMINDME> (create-css-dispatcher "print.css")
(#<CLOSURE (LAMBDA #) {10042EF649}> #<CLOSURE (LAMBDA #) {1003D07B19}>
 DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (create-css-dispatcher "screen.css")
(#<CLOSURE (LAMBDA #) {1004315129}> #<CLOSURE (LAMBDA #) {10042EF649}>
 #<CLOSURE (LAMBDA #) {1003D07B19}> DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (create-css-dispatcher "ie.css")
(#<CLOSURE (LAMBDA #) {100433D8A9}> #<CLOSURE (LAMBDA #) {1004315129}>
 #<CLOSURE (LAMBDA #) {10042EF649}> #<CLOSURE (LAMBDA #) {1003D07B19}>
 DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :class "container" (:div :id "header"
                   (:img :src "/logo.jpg"
                         :alt "Some image"
                         :class "logo")
                   (:span :class "strapline"
                          "Your friend's birthday in your pocket"))
             ,@body)))))
STANDARD-PAGE
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                   (:img :src "/logo.jpg"
                         :alt "Some image"
                         :class "logo")
                   (:span :class "strapline"
                          "Your friend's birthday in your pocket"))
              ,@body)))))
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 07:43:36 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.128
STYLE-WARNING: redefining REMINDME::CREATE-CSS-DISPATCHER in DEFUN
STANDARD-PAGE
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :class "span-6 register" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "span-6 login" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password"))
           (:input :type :submit :value "Login"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:form :class "span-6" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "span-6" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password"))
           (:input :type :submit :value "Login"))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:div :class "span-6" (:form :class "register" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "login" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:input :type :password :name "password"))
           (:input :type :submit :value "Login")))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/remindme.css"
                    :media "print")
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                                            (:img :src "/logo.jpg"
                                                  :alt "Some image"
                                                  :class "logo")
                                            (:span :class "strapline"
                                                   "Your friend's birthday in your pocket"))
                   ,@body)))))
STANDARD-PAGE
REMINDME> (create-css-dispatcher "remindme.css")
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 08:17:52 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.168
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
(#<CLOSURE (LAMBDA #) {100497A8C9}> #<CLOSURE (LAMBDA #) {1003386CC9}>
 #<CLOSURE (LAMBDA #) {1003386CF9}> #<CLOSURE (LAMBDA #) {1003386D29}>
 #<CLOSURE (LAMBDA #) {1003D07B19}> DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/remindme.css"
                    )
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                                            (:img :src "/logo.jpg"
                                                  :alt "Some image"
                                                  :class "logo")
                                            (:span :class "strapline"
                                                   "Your friend's birthday in your pocket"))
                   ,@body)))))
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 08:17:52 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.175
STANDARD-PAGE
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/remindme.css"
                    )
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery-validate.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                                            (:img :src "/logo.jpg"
                                                  :alt "Some image"
                                                  :class "logo")
                                            (:span :class "alt strapline"
                                                   "Your friend's birthday in your pocket"))
                   ,@body)))))
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 08:17:52 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.110
STANDARD-PAGE
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:div :class "span-6" (:form :class "register" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:br)  (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:br) (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:br) (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "login" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:br) (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:br) (:input :type :password :name "password"))
           (:input :type :submit :value "Login")))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (sb-ext:list-all-timers)
(#<SB-EXT:TIMER "vijay" {10039F4BE1}> #<SB-EXT:TIMER "disco" {10039F5901}>
 #<SB-EXT:TIMER "creep" {10039F67F1}> #<SB-EXT:TIMER "Ajit" {10039F8731}>)
REMINDME> (push (create-folder-dispatcher-and-handler "/public" "/home/manish/projects/lisp/public/"))
; Evaluation aborted.
REMINDME> (push (create-folder-dispatcher-and-handler "/public" "/home/manish/projects/lisp/public/") *dispatch-table*)
; Evaluation aborted.
REMINDME> (push (create-folder-dispatcher-and-handler "/public/" "/home/manish/projects/lisp/public/") *dispatch-table*)
(#<CLOSURE (LAMBDA #) {1003A56AC9}> #<CLOSURE (LAMBDA #) {1002D640E9}>
 #<CLOSURE (LAMBDA #) {1003764F59}> #<CLOSURE (LAMBDA #) {1003764F89}>
 #<CLOSURE (LAMBDA #) {1003764FB9}> #<CLOSURE (LAMBDA #) {1003D07B19}>
 DISPATCH-EASY-HANDLERS DEFAULT-DISPATCHER)
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:div :class "span-8" (:form :class "register" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:br)  (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:br) (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:br) (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "login" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:br) (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:br) (:input :type :password :name "password"))
           (:input :type :submit :value "Login")))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/remindme.css"
                    )
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery.validate.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                                            (:img :src "/logo.jpg"
                                                  :alt "Some image"
                                                  :class "logo")
                                            (:span :class "alt strapline"
                                                   "Your friend's birthday in your pocket"))
                   ,@body)))))
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 25 SEP 2011 08:17:52 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.123
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
STANDARD-PAGE
REMINDME> (define-easy-handler (create-user :uri "/create-user") ()
  (standard-page (:title "Create a new assistant")
    (:h3 "Create a new assistant to remind you and your friends about upcoming birthdays in a few seconds.")
    (:div :class "span-8" (:form :class "register" :id "new-user" :action "/new-user" :method :post :enctype "multipart/form-data"
           (:p "Name: " (:br)  (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:br) (:input :type :password :name "password") (:br))
           (:p "Confirm Password: " (:br) (:input :type :password :name "confirmpassword"))
           (:p "File"  (:input :type :file :name "file1"))
           (:input :type :submit :value "Create user"))
    (:form :class "login" :id "login" :action "/login-user" :method :post
           (:p "Name: " (:br) (:input :type :string :name "name" :label "Name"))
           (:p "Password: " (:br) (:input :type :password :name "password"))
           (:input :type :submit :value "Login")))))
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
CREATE-USER
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/remindme.css"
                    )
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery.validate.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                                            (:img :src "/logo.jpg"
                                                  :alt "Some image"
                                                  :class "logo")
                                            (:span :class "alt strapline"
                                                   "Your friend's birthday in your pocket"))
                   ,@body)))))
STANDARD-PAGE
REMINDME> (defmacro standard-page ((&key title) &body body)
  `(with-html-output-to-string (*standard-output* nil :prologue t :indent t)
     (:html :xmlns "http://www.w3.org/1999/xhtml"
            :xml\:lang "en"
            :lang "en"
            (:head
             (:meta :http-equiv "Content-Type"
                    :content "text/html;charset=utf-8")
             (:title ,title)
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/remindme.css")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/screen.css"
                    :media "screen, projection")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/print.css"
                    :media "print")
             (:link :type "text/css"
                    :rel "stylesheet"
                    :href "/public/css/blueprint/remindme.css"
                    )
             (:script :type "text/javascript" 
                      :src "http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js"))
            (:script :type "text/javascript"
                     :src "/public/jquery.validate.js")
            (:script :type "text/javascript"
                     :src "/public/remind-me.js")
            (:body
             (:div :class "container" (:div :id "header" :class "span-24"
                                            (:img :src "/logo.jpg"
                                                  :alt "Some image"
                                                  :class "logo")
                                            (:span :class "alt strapline"
                                                   "Your friend's birthday in your pocket"))
                   ,@body)))))
; compiling file "/home/manish/projects/lisp/web/learn/remind-me.lisp" (written 26 SEP 2011 08:17:06 PM):

; /home/manish/projects/lisp/web/learn/remind-me.fasl written
; compilation finished in 0:00:00.122
STYLE-WARNING: redefining REMINDME::CREATE-USER in DEFUN
STANDARD-PAGE
REMINDME> 